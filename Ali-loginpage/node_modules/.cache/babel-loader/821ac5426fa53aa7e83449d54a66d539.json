{"ast":null,"code":"/**\n * @remix-run/router v1.16.1\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n} ////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\n\n\nvar Action;\n\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\n\nconst PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\n\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  let {\n    initialEntries = [\"/\"],\n    initialIndex,\n    v5Compat = false\n  } = options;\n  let entries; // Declare so we can access from createMemoryLocation\n\n  entries = initialEntries.map((entry, index) => createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined));\n  let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  let action = Action.Pop;\n  let listener = null;\n\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n\n  function getCurrentLocation() {\n    return entries[index];\n  }\n\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n\n    let location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n\n  function createHref(to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history = {\n    get index() {\n      return index;\n    },\n\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getCurrentLocation();\n    },\n\n    createHref,\n\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n\n    encodeLocation(to) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 1\n        });\n      }\n    },\n\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 0\n        });\n      }\n    },\n\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n\n      if (listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta\n        });\n      }\n    },\n\n    listen(fn) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    }\n\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\n\n\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createBrowserLocation(window, globalHistory) {\n    let {\n      pathname,\n      search,\n      hash\n    } = window.location;\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\n\n\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createHashLocation(window, globalHistory) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\"\n    } = parsePath(window.location.hash.substr(1)); // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path=\"*\">) since that matches internally against\n    // \"/*\" and we'd expect /#something to 404 in a hash router app.\n\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createHashHref(window, to) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location, to) {\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n}\n\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\n\n\nfunction getHistoryState(location, index) {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\n\n\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n\n  let location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\n\n\nfunction createPath(_ref) {\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\"\n  } = _ref;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\n\n\nfunction parsePath(path) {\n  let parsedPath = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nfunction getUrlBasedHistory(getLocation, createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  let {\n    window = document.defaultView,\n    v5Compat = false\n  } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener = null;\n  let index = getIndex(); // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState(_extends({}, globalHistory.state, {\n      idx: index\n    }), \"\");\n  }\n\n  function getIndex() {\n    let state = globalHistory.state || {\n      idx: null\n    };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n\n    if (listener) {\n      listener({\n        action,\n        location: history.location,\n        delta\n      });\n    }\n  }\n\n  function push(to, state) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location); // try...catch because iOS limits us to 100 pushState calls :/\n\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      } // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n\n\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 1\n      });\n    }\n  }\n\n  function replace(to, state) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 0\n      });\n    }\n  }\n\n  function createURL(to) {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base = window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n    let href = typeof to === \"string\" ? to : createPath(to); // Treating this as a full URL will strip any trailing spaces so we need to\n    // pre-encode them since they might be part of a matching splat param from\n    // an ancestor route\n\n    href = href.replace(/ $/, \"%20\");\n    invariant(base, \"No window.location.(origin|href) available to create URL for href: \" + href);\n    return new URL(href, base);\n  }\n\n  let history = {\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n\n    listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n\n    createHref(to) {\n      return createHref(window, to);\n    },\n\n    createURL,\n\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n\n    push,\n    replace,\n\n    go(n) {\n      return globalHistory.go(n);\n    }\n\n  };\n  return history;\n} //#endregion\n\n\nvar ResultType;\n\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\n\nconst immutableRouteKeys = new Set([\"lazy\", \"caseSensitive\", \"path\", \"id\", \"index\", \"children\"]);\n\nfunction isIndexRoute(route) {\n  return route.index === true;\n} // Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject's within the Router\n\n\nfunction convertRoutesToDataRoutes(routes, mapRouteProperties, parentPath, manifest) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n\n  if (manifest === void 0) {\n    manifest = {};\n  }\n\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!manifest[id], \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n\n    if (isIndexRoute(route)) {\n      let indexRoute = _extends({}, route, mapRouteProperties(route), {\n        id\n      });\n\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute = _extends({}, route, mapRouteProperties(route), {\n        id,\n        children: undefined\n      });\n\n      manifest[id] = pathOrLayoutRoute;\n\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(route.children, mapRouteProperties, treePath, manifest);\n      }\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\n\n\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    let decoded = decodePath(pathname);\n    matches = matchRouteBranch(branches[i], decoded);\n  }\n\n  return matches;\n}\n\nfunction convertRouteMatchToUiMatch(match, loaderData) {\n  let {\n    route,\n    pathname,\n    params\n  } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\n\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n\n  let flattenRoute = (route, index, relativePath) => {\n    let meta = {\n      relativePath: relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta); // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n\n    if (route.children && route.children.length > 0) {\n      invariant( // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    } // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n\n\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  };\n\n  routes.forEach((route, index) => {\n    var _route$path; // coarse-grain check for optional params\n\n\n    if (route.path === \"\" || !((_route$path = route.path) != null && _route$path.includes(\"?\"))) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n  return branches;\n}\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\n\n\nfunction explodeOptionalSegments(path) {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n  let [first, ...rest] = segments; // Optional path segments are denoted by a trailing `?`\n\n  let isOptional = first.endsWith(\"?\"); // Compute the corresponding required segment: `foo?` -> `foo`\n\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n  let result = []; // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n\n  result.push(...restExploded.map(subpath => subpath === \"\" ? required : [required, subpath].join(\"/\"))); // Then, if this is an optional value, add all child versions without\n\n  if (isOptional) {\n    result.push(...restExploded);\n  } // for absolute paths, ensure `/` instead of empty segment\n\n\n  return result.map(exploded => path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded);\n}\n\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\n\nconst paramRe = /^:[\\w-]+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\n\nconst isSplat = s => s === \"*\";\n\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\n\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ? // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\n\nfunction matchRouteBranch(branch, pathname) {\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    let route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\n\n\nfunction generatePath(originalPath, params) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  let path = originalPath;\n\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(false, \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n    path = path.replace(/\\*$/, \"/*\");\n  } // ensure `/` is added at the beginning if the path is absolute\n\n\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n\n  const stringify = p => p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n\n  const segments = path.split(/\\/+/).map((segment, index, array) => {\n    const isLastSegment = index === array.length - 1; // only apply the splat if it's the last segment\n\n    if (isLastSegment && segment === \"*\") {\n      const star = \"*\"; // Apply the splat\n\n      return stringify(params[star]);\n    }\n\n    const keyMatch = segment.match(/^:([\\w-]+)(\\??)$/);\n\n    if (keyMatch) {\n      const [, key, optional] = keyMatch;\n      let param = params[key];\n      invariant(optional === \"?\" || param != null, \"Missing \\\":\" + key + \"\\\" param\");\n      return stringify(param);\n    } // Remove any optional markers from optional static segments\n\n\n    return segment.replace(/\\?$/g, \"\");\n  }) // Remove empty segments\n  .filter(segment => !!segment);\n  return prefix + segments.join(\"/\");\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\n\n\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n\n  let [matcher, compiledParams] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = compiledParams.reduce((memo, _ref, index) => {\n    let {\n      paramName,\n      isOptional\n    } = _ref; // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n\n    const value = captureGroups[index];\n\n    if (isOptional && !value) {\n      memo[paramName] = undefined;\n    } else {\n      memo[paramName] = (value || \"\").replace(/%2F/g, \"/\");\n    }\n\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\n\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n\n  if (end === void 0) {\n    end = true;\n  }\n\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  let params = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^${}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/\\/:([\\w-]+)(\\?)?/g, (_, paramName, isOptional) => {\n    params.push({\n      paramName,\n      isOptional: isOptional != null\n    });\n    return isOptional ? \"/?([^\\\\/]+)?\" : \"/([^\\\\/]+)\";\n  });\n\n  if (path.endsWith(\"*\")) {\n    params.push({\n      paramName: \"*\"\n    });\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, params];\n}\n\nfunction decodePath(value) {\n  try {\n    return value.split(\"/\").map(v => decodeURIComponent(v).replace(/\\//g, \"%2F\")).join(\"/\");\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\n\n\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  } // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n\n\n  let startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\n\n\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\n\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\n\n\nfunction getPathContributingMatches(matches) {\n  return matches.filter((match, index) => index === 0 || match.route.path && match.route.path.length > 0);\n} // Return the array of pathnames for the current route matches - used to\n// generate the routePathnames input for resolveTo()\n\n\nfunction getResolveToMatches(matches, v7_relativeSplatPath) {\n  let pathMatches = getPathContributingMatches(matches); // When v7_relativeSplatPath is enabled, use the full pathname for the leaf\n  // match so we include splat values for \".\" links.  See:\n  // https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329\n\n  if (v7_relativeSplatPath) {\n    return pathMatches.map((match, idx) => idx === matches.length - 1 ? match.pathname : match.pathnameBase);\n  }\n\n  return pathMatches.map(match => match.pathnameBase);\n}\n/**\n * @private\n */\n\n\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n\n  let to;\n\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n  let from; // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1; // With relative=\"route\" (the default), each leading .. segment means\n    // \"go up one route\" instead of \"go up one URL segment\".  This is a key\n    // difference from how <a href> works and a major reason we call this a\n    // \"to\" value instead of a \"href\".\n\n    if (!isPathRelative && toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from); // Ensure the pathname has a trailing slash if the original \"to\" had one\n\n  let hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\"); // Or if this was a link to the current path which has a trailing slash\n\n  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n/**\n * @private\n */\n\n\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\n\n\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n/**\n * @private\n */\n\n\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n/**\n * @private\n */\n\n\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n/**\n * @private\n */\n\n\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\n\n\nconst json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  let headers = new Headers(responseInit.headers);\n\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers\n  }));\n};\n\nclass AbortedDeferredError extends Error {}\n\nclass DeferredData {\n  constructor(data, responseInit) {\n    this.pendingKeysSet = new Set();\n    this.subscribers = new Set();\n    this.deferredKeys = [];\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\"); // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n\n    let reject;\n    this.abortPromise = new Promise((_, r) => reject = r);\n    this.controller = new AbortController();\n\n    let onAbort = () => reject(new AbortedDeferredError(\"Deferred data aborted\"));\n\n    this.unlistenAbortSignal = () => this.controller.signal.removeEventListener(\"abort\", onAbort);\n\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce((acc, _ref2) => {\n      let [key, value] = _ref2;\n      return Object.assign(acc, {\n        [key]: this.trackPromise(key, value)\n      });\n    }, {});\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  trackPromise(key, value) {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key); // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n\n    let promise = Promise.race([value, this.abortPromise]).then(data => this.onSettle(promise, key, undefined, data), error => this.onSettle(promise, key, error)); // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n\n    promise.catch(() => {});\n    Object.defineProperty(promise, \"_tracked\", {\n      get: () => true\n    });\n    return promise;\n  }\n\n  onSettle(promise, key, error, data) {\n    if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    } // If the promise was resolved/rejected with undefined, we'll throw an error as you\n    // should always resolve with a value or null\n\n\n    if (error === undefined && data === undefined) {\n      let undefinedError = new Error(\"Deferred data for key \\\"\" + key + \"\\\" resolved/rejected with `undefined`, \" + \"you must resolve/reject with a value or `null`.\");\n      Object.defineProperty(promise, \"_error\", {\n        get: () => undefinedError\n      });\n      this.emit(false, key);\n      return Promise.reject(undefinedError);\n    }\n\n    if (data === undefined) {\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", {\n      get: () => data\n    });\n    this.emit(false, key);\n    return data;\n  }\n\n  emit(aborted, settledKey) {\n    this.subscribers.forEach(subscriber => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal) {\n    let aborted = false;\n\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise(resolve => {\n        this.subscribe(aborted => {\n          signal.removeEventListener(\"abort\", onAbort);\n\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n    return Object.entries(this.data).reduce((acc, _ref3) => {\n      let [key, value] = _ref3;\n      return Object.assign(acc, {\n        [key]: unwrapTrackedPromise(value)\n      });\n    }, {});\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n\n}\n\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\n\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n\n  return value._data;\n}\n\nconst defer = function defer(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  return new DeferredData(data, responseInit);\n};\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\n\n\nconst redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n\n  let responseInit = init;\n\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers\n  }));\n};\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\n\n\nconst redirectDocument = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n *\n * We don't export the class for public use since it's an implementation\n * detail, but we export the interface above so folks can build their own\n * abstractions around instances via isRouteErrorResponse()\n */\n\n\nclass ErrorResponseImpl {\n  constructor(status, statusText, data, internal) {\n    if (internal === void 0) {\n      internal = false;\n    }\n\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n\n}\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\n\n\nfunction isRouteErrorResponse(error) {\n  return error != null && typeof error.status === \"number\" && typeof error.statusText === \"string\" && typeof error.internal === \"boolean\" && \"data\" in error;\n}\n\nconst validMutationMethodsArr = [\"post\", \"put\", \"patch\", \"delete\"];\nconst validMutationMethods = new Set(validMutationMethodsArr);\nconst validRequestMethodsArr = [\"get\", ...validMutationMethodsArr];\nconst validRequestMethods = new Set(validRequestMethodsArr);\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\nconst IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst IDLE_BLOCKER = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined\n};\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\nconst defaultMapRouteProperties = route => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary)\n});\n\nconst TRANSITIONS_STORAGE_KEY = \"remix-router-transitions\"; //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\n\nfunction createRouter(init) {\n  const routerWindow = init.window ? init.window : typeof window !== \"undefined\" ? window : undefined;\n  const isBrowser = typeof routerWindow !== \"undefined\" && typeof routerWindow.document !== \"undefined\" && typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  let mapRouteProperties;\n\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  } // Routes keyed by ID\n\n\n  let manifest = {}; // Routes in tree format for matching\n\n  let dataRoutes = convertRoutesToDataRoutes(init.routes, mapRouteProperties, undefined, manifest);\n  let inFlightDataRoutes;\n  let basename = init.basename || \"/\";\n  let dataStrategyImpl = init.unstable_dataStrategy || defaultDataStrategy; // Config driven behavior flags\n\n  let future = _extends({\n    v7_fetcherPersist: false,\n    v7_normalizeFormMethod: false,\n    v7_partialHydration: false,\n    v7_prependBasename: false,\n    v7_relativeSplatPath: false,\n    unstable_skipActionErrorRevalidation: false\n  }, init.future); // Cleanup function for history\n\n\n  let unlistenHistory = null; // Externally-provided functions to call on all state changes\n\n  let subscribers = new Set(); // Externally-provided object to hold scroll restoration locations during routing\n\n  let savedScrollPositions = null; // Externally-provided function to get scroll restoration keys\n\n  let getScrollRestorationKey = null; // Externally-provided function to get current scroll position\n\n  let getScrollPosition = null; // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n\n  let initialScrollRestored = init.hydrationData != null;\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n    let {\n      matches,\n      route\n    } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = {\n      [route.id]: error\n    };\n  }\n\n  let initialized;\n  let hasLazyRoutes = initialMatches.some(m => m.route.lazy);\n  let hasLoaders = initialMatches.some(m => m.route.loader);\n\n  if (hasLazyRoutes) {\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    initialized = false;\n  } else if (!hasLoaders) {\n    // If we've got no loaders to run, then we're good to go\n    initialized = true;\n  } else if (future.v7_partialHydration) {\n    // If partial hydration is enabled, we're initialized so long as we were\n    // provided with hydrationData for every route with a loader, and no loaders\n    // were marked for explicit hydration\n    let loaderData = init.hydrationData ? init.hydrationData.loaderData : null;\n    let errors = init.hydrationData ? init.hydrationData.errors : null;\n\n    let isRouteInitialized = m => {\n      // No loader, nothing to initialize\n      if (!m.route.loader) {\n        return true;\n      } // Explicitly opting-in to running on hydration\n\n\n      if (typeof m.route.loader === \"function\" && m.route.loader.hydrate === true) {\n        return false;\n      } // Otherwise, initialized if hydrated with data or an error\n\n\n      return loaderData && loaderData[m.route.id] !== undefined || errors && errors[m.route.id] !== undefined;\n    }; // If errors exist, don't consider routes below the boundary\n\n\n    if (errors) {\n      let idx = initialMatches.findIndex(m => errors[m.route.id] !== undefined);\n      initialized = initialMatches.slice(0, idx + 1).every(isRouteInitialized);\n    } else {\n      initialized = initialMatches.every(isRouteInitialized);\n    }\n  } else {\n    // Without partial hydration - we're initialized if we were provided any\n    // hydrationData - which is expected to be complete\n    initialized = init.hydrationData != null;\n  }\n\n  let router;\n  let state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map()\n  }; // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n\n  let pendingAction = Action.Pop; // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n\n  let pendingPreventScrollReset = false; // AbortController for the active navigation\n\n  let pendingNavigationController; // Should the current navigation enable document.startViewTransition?\n\n  let pendingViewTransitionEnabled = false; // Store applied view transitions so we can apply them on POP\n\n  let appliedViewTransitions = new Map(); // Cleanup function for persisting applied transitions to sessionStorage\n\n  let removePageHideEventListener = null; // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n\n  let isUninterruptedRevalidation = false; // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n\n  let isRevalidationRequired = false; // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n\n  let cancelledDeferredRoutes = []; // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n\n  let cancelledFetcherLoads = []; // AbortControllers for any in-flight fetchers\n\n  let fetchControllers = new Map(); // Track loads based on the order in which they started\n\n  let incrementingLoadId = 0; // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n\n  let pendingNavigationLoadId = -1; // Fetchers that triggered data reloads as a result of their actions\n\n  let fetchReloadIds = new Map(); // Fetchers that triggered redirect navigations\n\n  let fetchRedirectIds = new Set(); // Most recent href/match for fetcher.load calls for fetchers\n\n  let fetchLoadMatches = new Map(); // Ref-count mounted fetchers so we know when it's ok to clean them up\n\n  let activeFetchers = new Map(); // Fetchers that have requested a delete when using v7_fetcherPersist,\n  // they'll be officially removed after they return to idle\n\n  let deletedFetchers = new Set(); // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n\n  let activeDeferreds = new Map(); // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n\n  let blockerFunctions = new Map(); // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n\n  let ignoreNextHistoryUpdate = false; // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(_ref => {\n      let {\n        action: historyAction,\n        location,\n        delta\n      } = _ref; // Ignore this event if it was just us resetting the URL from a\n      // blocked POP navigation\n\n      if (ignoreNextHistoryUpdate) {\n        ignoreNextHistoryUpdate = false;\n        return;\n      }\n\n      warning(blockerFunctions.size === 0 || delta != null, \"You are trying to use a blocker on a POP navigation to a location \" + \"that was not created by @remix-run/router. This will fail silently in \" + \"production. This can happen if you are navigating outside the router \" + \"via `window.history.pushState`/`window.location.hash` instead of using \" + \"router navigation APIs.  This can also happen if you are using \" + \"createHashRouter and the user manually changes the URL.\");\n      let blockerKey = shouldBlockNavigation({\n        currentLocation: state.location,\n        nextLocation: location,\n        historyAction\n      });\n\n      if (blockerKey && delta != null) {\n        // Restore the URL to match the current UI, but don't update router state\n        ignoreNextHistoryUpdate = true;\n        init.history.go(delta * -1); // Put the blocker into a blocked state\n\n        updateBlocker(blockerKey, {\n          state: \"blocked\",\n          location,\n\n          proceed() {\n            updateBlocker(blockerKey, {\n              state: \"proceeding\",\n              proceed: undefined,\n              reset: undefined,\n              location\n            }); // Re-do the same POP navigation we just blocked\n\n            init.history.go(delta);\n          },\n\n          reset() {\n            let blockers = new Map(state.blockers);\n            blockers.set(blockerKey, IDLE_BLOCKER);\n            updateState({\n              blockers\n            });\n          }\n\n        });\n        return;\n      }\n\n      return startNavigation(historyAction, location);\n    });\n\n    if (isBrowser) {\n      // FIXME: This feels gross.  How can we cleanup the lines between\n      // scrollRestoration/appliedTransitions persistance?\n      restoreAppliedTransitions(routerWindow, appliedViewTransitions);\n\n      let _saveAppliedTransitions = () => persistAppliedTransitions(routerWindow, appliedViewTransitions);\n\n      routerWindow.addEventListener(\"pagehide\", _saveAppliedTransitions);\n\n      removePageHideEventListener = () => routerWindow.removeEventListener(\"pagehide\", _saveAppliedTransitions);\n    } // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n\n\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location, {\n        initialHydration: true\n      });\n    }\n\n    return router;\n  } // Clean up a router and it's side effects\n\n\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n\n    if (removePageHideEventListener) {\n      removePageHideEventListener();\n    }\n\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  } // Subscribe to state updates for the router\n\n\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  } // Update our state and notify the calling context of the change\n\n\n  function updateState(newState, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    state = _extends({}, state, newState); // Prep fetcher cleanup so we can tell the UI which fetcher data entries\n    // can be removed\n\n    let completedFetchers = [];\n    let deletedFetchersKeys = [];\n\n    if (future.v7_fetcherPersist) {\n      state.fetchers.forEach((fetcher, key) => {\n        if (fetcher.state === \"idle\") {\n          if (deletedFetchers.has(key)) {\n            // Unmounted from the UI and can be totally removed\n            deletedFetchersKeys.push(key);\n          } else {\n            // Returned to idle but still mounted in the UI, so semi-remains for\n            // revalidations and such\n            completedFetchers.push(key);\n          }\n        }\n      });\n    } // Iterate over a local copy so that if flushSync is used and we end up\n    // removing and adding a new subscriber due to the useCallback dependencies,\n    // we don't get ourselves into a loop calling the new subscriber immediately\n\n\n    [...subscribers].forEach(subscriber => subscriber(state, {\n      deletedFetchers: deletedFetchersKeys,\n      unstable_viewTransitionOpts: opts.viewTransitionOpts,\n      unstable_flushSync: opts.flushSync === true\n    })); // Remove idle fetchers from state since we only care about in-flight fetchers.\n\n    if (future.v7_fetcherPersist) {\n      completedFetchers.forEach(key => state.fetchers.delete(key));\n      deletedFetchersKeys.forEach(key => deleteFetcher(key));\n    }\n  } // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n\n\n  function completeNavigation(location, newState, _temp) {\n    var _location$state, _location$state2;\n\n    let {\n      flushSync\n    } = _temp === void 0 ? {} : _temp; // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n\n    let isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === \"loading\" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;\n    let actionData;\n\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    } // Always preserve any existing loaderData from re-used routes\n\n\n    let loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData; // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n\n    let blockers = state.blockers;\n\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));\n    } // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n\n\n    let preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true;\n\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n\n    if (isUninterruptedRevalidation) ;else if (pendingAction === Action.Pop) ;else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    }\n    let viewTransitionOpts; // On POP, enable transitions if they were enabled on the original navigation\n\n    if (pendingAction === Action.Pop) {\n      // Forward takes precedence so they behave like the original navigation\n      let priorPaths = appliedViewTransitions.get(state.location.pathname);\n\n      if (priorPaths && priorPaths.has(location.pathname)) {\n        viewTransitionOpts = {\n          currentLocation: state.location,\n          nextLocation: location\n        };\n      } else if (appliedViewTransitions.has(location.pathname)) {\n        // If we don't have a previous forward nav, assume we're popping back to\n        // the new location and enable if that location previously enabled\n        viewTransitionOpts = {\n          currentLocation: location,\n          nextLocation: state.location\n        };\n      }\n    } else if (pendingViewTransitionEnabled) {\n      // Store the applied transition on PUSH/REPLACE\n      let toPaths = appliedViewTransitions.get(state.location.pathname);\n\n      if (toPaths) {\n        toPaths.add(location.pathname);\n      } else {\n        toPaths = new Set([location.pathname]);\n        appliedViewTransitions.set(state.location.pathname, toPaths);\n      }\n\n      viewTransitionOpts = {\n        currentLocation: state.location,\n        nextLocation: location\n      };\n    }\n\n    updateState(_extends({}, newState, {\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset,\n      blockers\n    }), {\n      viewTransitionOpts,\n      flushSync: flushSync === true\n    }); // Reset stateful navigation vars\n\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    pendingViewTransitionEnabled = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  } // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n\n\n  async function navigate(to, opts) {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, to, future.v7_relativeSplatPath, opts == null ? void 0 : opts.fromRouteId, opts == null ? void 0 : opts.relative);\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, false, normalizedPath, opts);\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state); // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n\n    nextLocation = _extends({}, nextLocation, init.history.encodeLocation(nextLocation));\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n    let historyAction = Action.Push;\n\n    if (userReplace === true) {\n      historyAction = Action.Replace;\n    } else if (userReplace === false) ;else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = Action.Replace;\n    }\n\n    let preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction\n    });\n\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n\n        proceed() {\n          updateBlocker(blockerKey, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation\n          }); // Send the same navigation through\n\n          navigate(to, opts);\n        },\n\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey, IDLE_BLOCKER);\n          updateState({\n            blockers\n          });\n        }\n\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n      enableViewTransition: opts && opts.unstable_viewTransition,\n      flushSync\n    });\n  } // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n\n\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    }); // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n\n    if (state.navigation.state === \"submitting\") {\n      return;\n    } // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n\n\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    } // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n\n\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  } // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n\n\n  async function startNavigation(historyAction, location, opts) {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true; // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename);\n    let flushSync = (opts && opts.flushSync) === true; // Short circuit with a 404 on the root error boundary if we match nothing\n\n    if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(routesToUse); // Cancel all pending deferred on 404s since we don't keep any routes\n\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error\n        }\n      }, {\n        flushSync\n      });\n      return;\n    } // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial load will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n\n\n    if (state.initialized && !isRevalidationRequired && isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {\n      completeNavigation(location, {\n        matches\n      }, {\n        flushSync\n      });\n      return;\n    } // Create a controller/Request for this navigation\n\n\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);\n    let pendingActionResult;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingActionResult = [findNearestBoundary(matches).route.id, {\n        type: ResultType.error,\n        error: opts.pendingError\n      }];\n    } else if (opts && opts.submission && isMutationMethod(opts.submission.formMethod)) {\n      // Call action if we received an action submission\n      let actionResult = await handleAction(request, location, opts.submission, matches, {\n        replace: opts.replace,\n        flushSync\n      });\n\n      if (actionResult.shortCircuited) {\n        return;\n      }\n\n      pendingActionResult = actionResult.pendingActionResult;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n      flushSync = false; // Create a GET request for the loaders\n\n      request = createClientSideRequest(init.history, request.url, request.signal);\n    } // Call loaders\n\n\n    let {\n      shortCircuited,\n      loaderData,\n      errors\n    } = await handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.fetcherSubmission, opts && opts.replace, opts && opts.initialHydration === true, flushSync, pendingActionResult);\n\n    if (shortCircuited) {\n      return;\n    } // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n\n\n    pendingNavigationController = null;\n    completeNavigation(location, _extends({\n      matches\n    }, getActionDataForCommit(pendingActionResult), {\n      loaderData,\n      errors\n    }));\n  } // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n\n\n  async function handleAction(request, location, submission, matches, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    interruptActiveLoads(); // Put us in a submitting state\n\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({\n      navigation\n    }, {\n      flushSync: opts.flushSync === true\n    }); // Call our action and get the result\n\n    let result;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id\n        })\n      };\n    } else {\n      let results = await callDataStrategy(\"action\", request, [actionMatch], matches);\n      result = results[0];\n\n      if (request.signal.aborted) {\n        return {\n          shortCircuited: true\n        };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace;\n\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        let location = normalizeRedirectLocation(result.response.headers.get(\"Location\"), new URL(request.url), basename);\n        replace = location === state.location.pathname + state.location.search;\n      }\n\n      await startRedirectNavigation(request, result, {\n        submission,\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id); // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n\n      if ((opts && opts.replace) !== true) {\n        pendingAction = Action.Push;\n      }\n\n      return {\n        pendingActionResult: [boundaryMatch.route.id, result]\n      };\n    }\n\n    return {\n      pendingActionResult: [actionMatch.route.id, result]\n    };\n  } // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n\n\n  async function handleLoaders(request, location, matches, overrideNavigation, submission, fetcherSubmission, replace, initialHydration, flushSync, pendingActionResult) {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation || getLoadingNavigation(location, submission); // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n\n    let activeSubmission = submission || fetcherSubmission || getSubmissionFromNavigation(loadingNavigation);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, activeSubmission, location, future.v7_partialHydration && initialHydration === true, future.unstable_skipActionErrorRevalidation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionResult); // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n\n    cancelActiveDeferreds(routeId => !(matches && matches.some(m => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some(m => m.route.id === routeId));\n    pendingNavigationLoadId = ++incrementingLoadId; // Short circuit if we have no loaders to run\n\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(location, _extends({\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingActionResult && isErrorResult(pendingActionResult[1]) ? {\n          [pendingActionResult[0]]: pendingActionResult[1].error\n        } : null\n      }, getActionDataForCommit(pendingActionResult), updatedFetchers ? {\n        fetchers: new Map(state.fetchers)\n      } : {}), {\n        flushSync\n      });\n      return {\n        shortCircuited: true\n      };\n    } // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    // If we have partialHydration enabled, then don't update the state for the\n    // initial data load since it's not a \"navigation\"\n\n\n    if (!isUninterruptedRevalidation && (!future.v7_partialHydration || !initialHydration)) {\n      revalidatingFetchers.forEach(rf => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher = getLoadingFetcher(undefined, fetcher ? fetcher.data : undefined);\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n      let actionData;\n\n      if (pendingActionResult && !isErrorResult(pendingActionResult[1])) {\n        // This is cast to `any` currently because `RouteData`uses any and it\n        // would be a breaking change to use any.\n        // TODO: v7 - change `RouteData` to use `unknown` instead of `any`\n        actionData = {\n          [pendingActionResult[0]]: pendingActionResult[1].data\n        };\n      } else if (state.actionData) {\n        if (Object.keys(state.actionData).length === 0) {\n          actionData = null;\n        } else {\n          actionData = state.actionData;\n        }\n      }\n\n      updateState(_extends({\n        navigation: loadingNavigation\n      }, actionData !== undefined ? {\n        actionData\n      } : {}, revalidatingFetchers.length > 0 ? {\n        fetchers: new Map(state.fetchers)\n      } : {}), {\n        flushSync\n      });\n    }\n\n    revalidatingFetchers.forEach(rf => {\n      if (fetchControllers.has(rf.key)) {\n        abortFetcher(rf.key);\n      }\n\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    }); // Proxy navigation abort through to revalidation fetchers\n\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(f => abortFetcher(f.key));\n\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n\n    let {\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);\n\n    if (request.signal.aborted) {\n      return {\n        shortCircuited: true\n      };\n    } // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n\n\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n\n    revalidatingFetchers.forEach(rf => fetchControllers.delete(rf.key)); // If any loaders returned a redirect Response, start a new REPLACE navigation\n\n    let redirect = findRedirect([...loaderResults, ...fetcherResults]);\n\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey = revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n\n      await startRedirectNavigation(request, redirect.result, {\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    } // Process and commit output from loaders\n\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingActionResult, revalidatingFetchers, fetcherResults, activeDeferreds); // Wire up subscribers to update loaderData as promises settle\n\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe(aborted => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    }); // During partial hydration, preserve SSR errors for routes that don't re-run\n\n    if (future.v7_partialHydration && initialHydration && state.errors) {\n      Object.entries(state.errors).filter(_ref2 => {\n        let [id] = _ref2;\n        return !matchesToLoad.some(m => m.route.id === id);\n      }).forEach(_ref3 => {\n        let [routeId, error] = _ref3;\n        errors = Object.assign(errors || {}, {\n          [routeId]: error\n        });\n      });\n    }\n\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers = updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n    return _extends({\n      loaderData,\n      errors\n    }, shouldUpdateFetchers ? {\n      fetchers: new Map(state.fetchers)\n    } : {});\n  } // Trigger a fetcher load/submit for the given fetcher key\n\n\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, href, future.v7_relativeSplatPath, routeId, opts == null ? void 0 : opts.relative);\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: normalizedPath\n      }), {\n        flushSync\n      });\n      return;\n    }\n\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, true, normalizedPath, opts);\n\n    if (error) {\n      setFetcherError(key, routeId, error, {\n        flushSync\n      });\n      return;\n    }\n\n    let match = getTargetMatch(matches, path);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, flushSync, submission);\n      return;\n    } // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n\n\n    fetchLoadMatches.set(key, {\n      routeId,\n      path\n    });\n    handleFetcherLoader(key, routeId, path, match, matches, flushSync, submission);\n  } // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n\n\n  async function handleFetcherAction(key, routeId, path, match, requestMatches, flushSync, submission) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action && !match.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId\n      });\n      setFetcherError(key, routeId, error, {\n        flushSync\n      });\n      return;\n    } // Put this fetcher into it's submitting state\n\n\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {\n      flushSync\n    }); // Call the action for the fetcher\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let actionResults = await callDataStrategy(\"action\", fetchRequest, [match], requestMatches);\n    let actionResult = actionResults[0];\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n\n      return;\n    } // When using v7_fetcherPersist, we don't want errors bubbling up to the UI\n    // or redirects processed for unmounted fetchers so we just revert them to\n    // idle\n\n\n    if (future.v7_fetcherPersist && deletedFetchers.has(key)) {\n      if (isRedirectResult(actionResult) || isErrorResult(actionResult)) {\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      } // Let SuccessResult's fall through for revalidation\n\n    } else {\n      if (isRedirectResult(actionResult)) {\n        fetchControllers.delete(key);\n\n        if (pendingNavigationLoadId > originatingLoadId) {\n          // A new navigation was kicked off after our action started, so that\n          // should take precedence over this redirect navigation.  We already\n          // set isRevalidationRequired so all loaders for the new route should\n          // fire unless opted out via shouldRevalidate\n          updateFetcherState(key, getDoneFetcher(undefined));\n          return;\n        } else {\n          fetchRedirectIds.add(key);\n          updateFetcherState(key, getLoadingFetcher(submission));\n          return startRedirectNavigation(fetchRequest, actionResult, {\n            fetcherSubmission: submission\n          });\n        }\n      } // Process any non-redirect errors thrown\n\n\n      if (isErrorResult(actionResult)) {\n        setFetcherError(key, routeId, actionResult.error);\n        return;\n      }\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    } // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n\n\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches = state.navigation.state !== \"idle\" ? matchRoutes(routesToUse, state.navigation.location, basename) : state.matches;\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, submission, nextLocation, false, future.unstable_skipActionErrorRevalidation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, [match.route.id, actionResult]); // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n\n    revalidatingFetchers.filter(rf => rf.key !== key).forEach(rf => {\n      let staleKey = rf.key;\n      let existingFetcher = state.fetchers.get(staleKey);\n      let revalidatingFetcher = getLoadingFetcher(undefined, existingFetcher ? existingFetcher.data : undefined);\n      state.fetchers.set(staleKey, revalidatingFetcher);\n\n      if (fetchControllers.has(staleKey)) {\n        abortFetcher(staleKey);\n      }\n\n      if (rf.controller) {\n        fetchControllers.set(staleKey, rf.controller);\n      }\n    });\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(rf => abortFetcher(rf.key));\n\n    abortController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    let {\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    abortController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(r => fetchControllers.delete(r.key));\n    let redirect = findRedirect([...loaderResults, ...fetcherResults]);\n\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey = revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n\n      return startRedirectNavigation(revalidationRequest, redirect.result);\n    } // Process and commit output from loaders\n\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds); // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n\n    abortStaleFetchLoads(loadId); // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n\n    if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers)\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors),\n        fetchers: new Map(state.fetchers)\n      });\n      isRevalidationRequired = false;\n    }\n  } // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n\n\n  async function handleFetcherLoader(key, routeId, path, match, matches, flushSync, submission) {\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getLoadingFetcher(submission, existingFetcher ? existingFetcher.data : undefined), {\n      flushSync\n    }); // Call the loader for this fetcher route match\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let results = await callDataStrategy(\"loader\", fetchRequest, [match], matches);\n    let result = results[0]; // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n\n    if (isDeferredResult(result)) {\n      result = (await resolveDeferredData(result, fetchRequest.signal, true)) || result;\n    } // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n\n\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    } // We don't want errors bubbling up or redirects followed for unmounted\n    // fetchers, so short circuit here if it was removed from the UI\n\n\n    if (deletedFetchers.has(key)) {\n      updateFetcherState(key, getDoneFetcher(undefined));\n      return;\n    } // If the loader threw a redirect Response, start a new REPLACE navigation\n\n\n    if (isRedirectResult(result)) {\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our loader started, so that\n        // should take precedence over this redirect navigation\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        await startRedirectNavigation(fetchRequest, result);\n        return;\n      }\n    } // Process any non-redirect errors thrown\n\n\n    if (isErrorResult(result)) {\n      setFetcherError(key, routeId, result.error);\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\"); // Put the fetcher back into an idle state\n\n    updateFetcherState(key, getDoneFetcher(result.data));\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n\n\n  async function startRedirectNavigation(request, redirect, _temp2) {\n    let {\n      submission,\n      fetcherSubmission,\n      replace\n    } = _temp2 === void 0 ? {} : _temp2;\n\n    if (redirect.response.headers.has(\"X-Remix-Revalidate\")) {\n      isRevalidationRequired = true;\n    }\n\n    let location = redirect.response.headers.get(\"Location\");\n    invariant(location, \"Expected a Location header on the redirect Response\");\n    location = normalizeRedirectLocation(location, new URL(request.url), basename);\n    let redirectLocation = createLocation(state.location, location, {\n      _isRedirect: true\n    });\n\n    if (isBrowser) {\n      let isDocumentReload = false;\n\n      if (redirect.response.headers.has(\"X-Remix-Reload-Document\")) {\n        // Hard reload if the response contained X-Remix-Reload-Document\n        isDocumentReload = true;\n      } else if (ABSOLUTE_URL_REGEX.test(location)) {\n        const url = init.history.createURL(location);\n        isDocumentReload = // Hard reload if it's an absolute URL to a new origin\n        url.origin !== routerWindow.location.origin || // Hard reload if it's an absolute URL that does not match our basename\n        stripBasename(url.pathname, basename) == null;\n      }\n\n      if (isDocumentReload) {\n        if (replace) {\n          routerWindow.location.replace(location);\n        } else {\n          routerWindow.location.assign(location);\n        }\n\n        return;\n      }\n    } // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n\n\n    pendingNavigationController = null;\n    let redirectHistoryAction = replace === true ? Action.Replace : Action.Push; // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n\n    let {\n      formMethod,\n      formAction,\n      formEncType\n    } = state.navigation;\n\n    if (!submission && !fetcherSubmission && formMethod && formAction && formEncType) {\n      submission = getSubmissionFromNavigation(state.navigation);\n    } // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n\n\n    let activeSubmission = submission || fetcherSubmission;\n\n    if (redirectPreserveMethodStatusCodes.has(redirect.response.status) && activeSubmission && isMutationMethod(activeSubmission.formMethod)) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: _extends({}, activeSubmission, {\n          formAction: location\n        }),\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    } else {\n      // If we have a navigation submission, we will preserve it through the\n      // redirect navigation\n      let overrideNavigation = getLoadingNavigation(redirectLocation, submission);\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Send fetcher submissions through for shouldRevalidate\n        fetcherSubmission,\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    }\n  } // Utility wrapper for calling dataStrategy client-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n\n\n  async function callDataStrategy(type, request, matchesToLoad, matches) {\n    try {\n      let results = await callDataStrategyImpl(dataStrategyImpl, type, request, matchesToLoad, matches, manifest, mapRouteProperties);\n      return await Promise.all(results.map((result, i) => {\n        if (isRedirectHandlerResult(result)) {\n          let response = result.result;\n          return {\n            type: ResultType.redirect,\n            response: normalizeRelativeRoutingRedirectResponse(response, request, matchesToLoad[i].route.id, matches, basename, future.v7_relativeSplatPath)\n          };\n        }\n\n        return convertHandlerResultToDataResult(result);\n      }));\n    } catch (e) {\n      // If the outer dataStrategy method throws, just return the error for all\n      // matches - and it'll naturally bubble to the root\n      return matchesToLoad.map(() => ({\n        type: ResultType.error,\n        error: e\n      }));\n    }\n  }\n\n  async function callLoadersAndMaybeResolveData(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {\n    let [loaderResults, ...fetcherResults] = await Promise.all([matchesToLoad.length ? callDataStrategy(\"loader\", request, matchesToLoad, matches) : [], ...fetchersToLoad.map(f => {\n      if (f.matches && f.match && f.controller) {\n        let fetcherRequest = createClientSideRequest(init.history, f.path, f.controller.signal);\n        return callDataStrategy(\"loader\", fetcherRequest, [f.match], f.matches).then(r => r[0]);\n      } else {\n        return Promise.resolve({\n          type: ResultType.error,\n          error: getInternalRouterError(404, {\n            pathname: f.path\n          })\n        });\n      }\n    })]);\n    await Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, loaderResults.map(() => request.signal), false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(f => f.match), fetcherResults, fetchersToLoad.map(f => f.controller ? f.controller.signal : null), true)]);\n    return {\n      loaderResults,\n      fetcherResults\n    };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true; // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds()); // Abort in-flight fetcher loads\n\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function updateFetcherState(key, fetcher, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }, {\n      flushSync: (opts && opts.flushSync) === true\n    });\n  }\n\n  function setFetcherError(key, routeId, error, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error\n      },\n      fetchers: new Map(state.fetchers)\n    }, {\n      flushSync: (opts && opts.flushSync) === true\n    });\n  }\n\n  function getFetcher(key) {\n    if (future.v7_fetcherPersist) {\n      activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1); // If this fetcher was previously marked for deletion, unmark it since we\n      // have a new instance\n\n      if (deletedFetchers.has(key)) {\n        deletedFetchers.delete(key);\n      }\n    }\n\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  function deleteFetcher(key) {\n    let fetcher = state.fetchers.get(key); // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n\n    if (fetchControllers.has(key) && !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))) {\n      abortFetcher(key);\n    }\n\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    deletedFetchers.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function deleteFetcherAndUpdateState(key) {\n    if (future.v7_fetcherPersist) {\n      let count = (activeFetchers.get(key) || 0) - 1;\n\n      if (count <= 0) {\n        activeFetchers.delete(key);\n        deletedFetchers.add(key);\n      } else {\n        activeFetchers.set(key, count);\n      }\n    } else {\n      deleteFetcher(key);\n    }\n\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n    let updatedFetchers = false;\n\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, \"Expected fetcher: \" + key);\n\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key, fn) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  } // Utility function to update blockers, ensuring valid state transitions\n\n\n  function updateBlocker(key, newBlocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER; // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n\n    invariant(blocker.state === \"unblocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"proceeding\" || blocker.state === \"blocked\" && newBlocker.state === \"unblocked\" || blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\", \"Invalid blocker state transition: \" + blocker.state + \" -> \" + newBlocker.state);\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({\n      blockers\n    });\n  }\n\n  function shouldBlockNavigation(_ref4) {\n    let {\n      currentLocation,\n      nextLocation,\n      historyAction\n    } = _ref4;\n\n    if (blockerFunctions.size === 0) {\n      return;\n    } // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n\n\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    } // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n\n\n    if (blockerFunction({\n      currentLocation,\n      nextLocation,\n      historyAction\n    })) {\n      return blockerKey;\n    }\n  }\n\n  function cancelActiveDeferreds(predicate) {\n    let cancelledRouteIds = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  } // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n\n\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null; // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function getScrollKey(location, matches) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(location, matches.map(m => convertRouteMatchToUiMatch(m, state.loaderData)));\n      return key || location.key;\n    }\n\n    return location.key;\n  }\n\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n\n    return null;\n  }\n\n  function _internalSetRoutes(newRoutes) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(newRoutes, mapRouteProperties, undefined, manifest);\n  }\n\n  router = {\n    get basename() {\n      return basename;\n    },\n\n    get future() {\n      return future;\n    },\n\n    get state() {\n      return state;\n    },\n\n    get routes() {\n      return dataRoutes;\n    },\n\n    get window() {\n      return routerWindow;\n    },\n\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: to => init.history.createHref(to),\n    encodeLocation: to => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher: deleteFetcherAndUpdateState,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes\n  };\n  return router;\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\n\nconst UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\nfunction createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to createStaticHandler\");\n  let manifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties;\n\n  if (opts != null && opts.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts != null && opts.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  } // Config driven behavior flags\n\n\n  let future = _extends({\n    v7_relativeSplatPath: false,\n    v7_throwAbortReason: false\n  }, opts ? opts.future : null);\n\n  let dataRoutes = convertRoutesToDataRoutes(routes, mapRouteProperties, undefined, manifest);\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   *\n   * - `opts.requestContext` is an optional server context that will be passed\n   *   to actions/loaders in the `context` parameter\n   * - `opts.skipLoaderErrorBubbling` is an optional parameter that will prevent\n   *   the bubbling of errors which allows single-fetch-type implementations\n   *   where the client will handle the bubbling and we may need to return data\n   *   for the handling route\n   */\n\n  async function query(request, _temp3) {\n    let {\n      requestContext,\n      skipLoaderErrorBubbling,\n      unstable_dataStrategy\n    } = _temp3 === void 0 ? {} : _temp3;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, {\n        method\n      });\n      let {\n        matches: methodNotAllowedMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext, unstable_dataStrategy || null, skipLoaderErrorBubbling === true, null);\n\n    if (isResponse(result)) {\n      return result;\n    } // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n\n\n    return _extends({\n      location,\n      basename\n    }, result);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   *\n   * - `opts.routeId` allows you to specify the specific route handler to call.\n   *   If not provided the handler will determine the proper route by matching\n   *   against `request.url`\n   * - `opts.requestContext` is an optional server context that will be passed\n   *    to actions/loaders in the `context` parameter\n   */\n\n\n  async function queryRoute(request, _temp4) {\n    let {\n      routeId,\n      requestContext,\n      unstable_dataStrategy\n    } = _temp4 === void 0 ? {} : _temp4;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, {\n        method\n      });\n    } else if (!matches) {\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n\n    let match = routeId ? matches.find(m => m.route.id === routeId) : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext, unstable_dataStrategy || null, false, match);\n\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    } // Pick off the right state value to return\n\n\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      var _result$activeDeferre;\n\n      let data = Object.values(result.loaderData)[0];\n\n      if ((_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(request, location, matches, requestContext, unstable_dataStrategy, skipLoaderErrorBubbling, routeMatch) {\n    invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, unstable_dataStrategy, skipLoaderErrorBubbling, routeMatch != null);\n        return result;\n      }\n\n      let result = await loadRouteData(request, matches, requestContext, unstable_dataStrategy, skipLoaderErrorBubbling, routeMatch);\n      return isResponse(result) ? result : _extends({}, result, {\n        actionData: null,\n        actionHeaders: {}\n      });\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction for a\n      // `queryRoute` call, we throw the `HandlerResult` to bail out early\n      // and then return or throw the raw Response here accordingly\n      if (isHandlerResult(e) && isResponse(e.result)) {\n        if (e.type === ResultType.error) {\n          throw e.result;\n        }\n\n        return e.result;\n      } // Redirects are always returned since they don't propagate to catch\n      // boundaries\n\n\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n\n      throw e;\n    }\n  }\n\n  async function submit(request, matches, actionMatch, requestContext, unstable_dataStrategy, skipLoaderErrorBubbling, isRouteRequest) {\n    let result;\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id\n      });\n\n      if (isRouteRequest) {\n        throw error;\n      }\n\n      result = {\n        type: ResultType.error,\n        error\n      };\n    } else {\n      let results = await callDataStrategy(\"action\", request, [actionMatch], matches, isRouteRequest, requestContext, unstable_dataStrategy);\n      result = results[0];\n\n      if (request.signal.aborted) {\n        throwStaticHandlerAbortedError(request, isRouteRequest, future);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.response.status,\n        headers: {\n          Location: result.response.headers.get(\"Location\")\n        }\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n\n      if (isRouteRequest) {\n        throw error;\n      }\n\n      result = {\n        type: ResultType.error,\n        error\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: {\n          [actionMatch.route.id]: result.data\n        },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    } // Create a GET request for the loaders\n\n\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal\n    });\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = skipLoaderErrorBubbling ? actionMatch : findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(loaderRequest, matches, requestContext, unstable_dataStrategy, skipLoaderErrorBubbling, null, [boundaryMatch.route.id, result]); // action status codes take precedence over loader status codes\n\n      return _extends({}, context, {\n        statusCode: isRouteErrorResponse(result.error) ? result.error.status : result.statusCode != null ? result.statusCode : 500,\n        actionData: null,\n        actionHeaders: _extends({}, result.headers ? {\n          [actionMatch.route.id]: result.headers\n        } : {})\n      });\n    }\n\n    let context = await loadRouteData(loaderRequest, matches, requestContext, unstable_dataStrategy, skipLoaderErrorBubbling, null);\n    return _extends({}, context, {\n      actionData: {\n        [actionMatch.route.id]: result.data\n      }\n    }, result.statusCode ? {\n      statusCode: result.statusCode\n    } : {}, {\n      actionHeaders: result.headers ? {\n        [actionMatch.route.id]: result.headers\n      } : {}\n    });\n  }\n\n  async function loadRouteData(request, matches, requestContext, unstable_dataStrategy, skipLoaderErrorBubbling, routeMatch, pendingActionResult) {\n    let isRouteRequest = routeMatch != null; // Short circuit if we have no loaders to run (queryRoute())\n\n    if (isRouteRequest && !(routeMatch != null && routeMatch.route.loader) && !(routeMatch != null && routeMatch.route.lazy)) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch == null ? void 0 : routeMatch.route.id\n      });\n    }\n\n    let requestMatches = routeMatch ? [routeMatch] : pendingActionResult && isErrorResult(pendingActionResult[1]) ? getLoaderMatchesUntilBoundary(matches, pendingActionResult[0]) : matches;\n    let matchesToLoad = requestMatches.filter(m => m.route.loader || m.route.lazy); // Short circuit if we have no loaders to run (query())\n\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce((acc, m) => Object.assign(acc, {\n          [m.route.id]: null\n        }), {}),\n        errors: pendingActionResult && isErrorResult(pendingActionResult[1]) ? {\n          [pendingActionResult[0]]: pendingActionResult[1].error\n        } : null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null\n      };\n    }\n\n    let results = await callDataStrategy(\"loader\", request, matchesToLoad, matches, isRouteRequest, requestContext, unstable_dataStrategy);\n\n    if (request.signal.aborted) {\n      throwStaticHandlerAbortedError(request, isRouteRequest, future);\n    } // Process and commit output from loaders\n\n\n    let activeDeferreds = new Map();\n    let context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionResult, activeDeferreds, skipLoaderErrorBubbling); // Add a null for any non-loader matches for proper revalidation on the client\n\n    let executedLoaders = new Set(matchesToLoad.map(match => match.route.id));\n    matches.forEach(match => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n    return _extends({}, context, {\n      matches,\n      activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null\n    });\n  } // Utility wrapper for calling dataStrategy server-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n\n\n  async function callDataStrategy(type, request, matchesToLoad, matches, isRouteRequest, requestContext, unstable_dataStrategy) {\n    let results = await callDataStrategyImpl(unstable_dataStrategy || defaultDataStrategy, type, request, matchesToLoad, matches, manifest, mapRouteProperties, requestContext);\n    return await Promise.all(results.map((result, i) => {\n      if (isRedirectHandlerResult(result)) {\n        let response = result.result; // Throw redirects and let the server handle them with an HTTP redirect\n\n        throw normalizeRelativeRoutingRedirectResponse(response, request, matchesToLoad[i].route.id, matches, basename, future.v7_relativeSplatPath);\n      }\n\n      if (isResponse(result.result) && isRouteRequest) {\n        // For SSR single-route requests, we want to hand Responses back\n        // directly without unwrapping\n        throw result;\n      }\n\n      return convertHandlerResultToDataResult(result);\n    }));\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute\n  };\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\n\n\nfunction getStaticContextFromError(routes, context, error) {\n  let newContext = _extends({}, context, {\n    statusCode: isRouteErrorResponse(error) ? error.status : 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error\n    }\n  });\n\n  return newContext;\n}\n\nfunction throwStaticHandlerAbortedError(request, isRouteRequest, future) {\n  if (future.v7_throwAbortReason && request.signal.reason !== undefined) {\n    throw request.signal.reason;\n  }\n\n  let method = isRouteRequest ? \"queryRoute\" : \"query\";\n  throw new Error(method + \"() call aborted: \" + request.method + \" \" + request.url);\n}\n\nfunction isSubmissionNavigation(opts) {\n  return opts != null && (\"formData\" in opts && opts.formData != null || \"body\" in opts && opts.body !== undefined);\n}\n\nfunction normalizeTo(location, matches, basename, prependBasename, to, v7_relativeSplatPath, fromRouteId, relative) {\n  let contextualMatches;\n  let activeRouteMatch;\n\n  if (fromRouteId) {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route\n    contextualMatches = [];\n\n    for (let match of matches) {\n      contextualMatches.push(match);\n\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  } // Resolve the relative path\n\n\n  let path = resolveTo(to ? to : \".\", getResolveToMatches(contextualMatches, v7_relativeSplatPath), stripBasename(location.pathname, basename) || location.pathname, relative === \"path\"); // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  } // Add an ?index param for matched index routes if we don't already have one\n\n\n  if ((to == null || to === \"\" || to === \".\") && activeRouteMatch && activeRouteMatch.route.index && !hasNakedIndexQuery(path.search)) {\n    path.search = path.search ? path.search.replace(/^\\?/, \"?index&\") : \"?index\";\n  } // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n\n\n  if (prependBasename && basename !== \"/\") {\n    path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n} // Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\n\n\nfunction normalizeNavigateOptions(normalizeFormMethod, isFetcher, path, opts) {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path\n    };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  }\n\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, {\n      type: \"invalid-body\"\n    })\n  }); // Create a Submission on non-GET navigations\n\n\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = normalizeFormMethod ? rawFormMethod.toUpperCase() : rawFormMethod.toLowerCase();\n  let formAction = stripHashFromPath(path);\n\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      let text = typeof opts.body === \"string\" ? opts.body : opts.body instanceof FormData || opts.body instanceof URLSearchParams ? // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n      Array.from(opts.body.entries()).reduce((acc, _ref5) => {\n        let [name, value] = _ref5;\n        return \"\" + acc + name + \"=\" + value + \"\\n\";\n      }, \"\") : String(opts.body);\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text\n        }\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      try {\n        let json = typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined\n          }\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n\n  invariant(typeof FormData === \"function\", \"FormData is not available in this environment\");\n  let searchParams;\n  let formData;\n\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n\n  let submission = {\n    formMethod,\n    formAction,\n    formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n    formData,\n    json: undefined,\n    text: undefined\n  };\n\n  if (isMutationMethod(submission.formMethod)) {\n    return {\n      path,\n      submission\n    };\n  } // Flatten submission onto URLSearchParams for GET submissions\n\n\n  let parsedPath = parsePath(path); // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n\n  parsedPath.search = \"?\" + searchParams;\n  return {\n    path: createPath(parsedPath),\n    submission\n  };\n} // Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\n\n\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  let boundaryMatches = matches;\n\n  if (boundaryId) {\n    let index = matches.findIndex(m => m.route.id === boundaryId);\n\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(history, state, matches, submission, location, isInitialLoad, skipActionErrorRevalidation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionResult) {\n  let actionResult = pendingActionResult ? isErrorResult(pendingActionResult[1]) ? pendingActionResult[1].error : pendingActionResult[1].data : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location); // Pick navigation matches that are net-new or qualify for revalidation\n\n  let boundaryId = pendingActionResult && isErrorResult(pendingActionResult[1]) ? pendingActionResult[0] : undefined;\n  let boundaryMatches = boundaryId ? getLoaderMatchesUntilBoundary(matches, boundaryId) : matches; // Don't revalidate loaders by default after action 4xx/5xx responses\n  // when the flag is enabled.  They can still opt-into revalidation via\n  // `shouldRevalidate` via `actionResult`\n\n  let actionStatus = pendingActionResult ? pendingActionResult[1].statusCode : undefined;\n  let shouldSkipRevalidation = skipActionErrorRevalidation && actionStatus && actionStatus >= 400;\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    let {\n      route\n    } = match;\n\n    if (route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n\n    if (route.loader == null) {\n      return false;\n    }\n\n    if (isInitialLoad) {\n      if (typeof route.loader !== \"function\" || route.loader.hydrate) {\n        return true;\n      }\n\n      return state.loaderData[route.id] === undefined && ( // Don't re-run if the loader ran and threw an error\n      !state.errors || state.errors[route.id] === undefined);\n    } // Always call the loader on new route instances and pending defer cancellations\n\n\n    if (isNewLoader(state.loaderData, state.matches[index], match) || cancelledDeferredRoutes.some(id => id === match.route.id)) {\n      return true;\n    } // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n\n\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n    return shouldRevalidateLoader(match, _extends({\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params\n    }, submission, {\n      actionResult,\n      unstable_actionStatus: actionStatus,\n      defaultShouldRevalidate: shouldSkipRevalidation ? false : // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n      isRevalidationRequired || currentUrl.pathname + currentUrl.search === nextUrl.pathname + nextUrl.search || // Search params affect all loaders\n      currentUrl.search !== nextUrl.search || isNewRouteInstance(currentRouteMatch, nextRouteMatch)\n    }));\n  }); // Pick fetcher.loads that need to be revalidated\n\n  let revalidatingFetchers = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate:\n    //  - on initial load (shouldn't be any fetchers then anyway)\n    //  - if fetcher won't be present in the subsequent render\n    //    - no longer matches the URL (v7_fetcherPersist=false)\n    //    - was unmounted but persisted due to v7_fetcherPersist=true\n    if (isInitialLoad || !matches.some(m => m.route.id === f.routeId) || deletedFetchers.has(key)) {\n      return;\n    }\n\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename); // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null\n      });\n      return;\n    } // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n\n\n    let fetcher = state.fetchers.get(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n    let shouldRevalidate = false;\n\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.includes(key)) {\n      // Always revalidate if the fetcher was cancelled\n      shouldRevalidate = true;\n    } else if (fetcher && fetcher.state !== \"idle\" && fetcher.data === undefined) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, _extends({\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params\n      }, submission, {\n        actionResult,\n        unstable_actionStatus: actionStatus,\n        defaultShouldRevalidate: shouldSkipRevalidation ? false : isRevalidationRequired\n      }));\n    }\n\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController()\n      });\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  let isNew = // [a] -> [a, b]\n  !currentMatch || // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id; // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n\n  let isMissingData = currentLoaderData[match.route.id] === undefined; // Always load if this is a net-new route or we don't yet have data\n\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(currentMatch, match) {\n  let currentPath = currentMatch.route.path;\n  return (// param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname || // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath != null && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\n\nfunction shouldRevalidateLoader(loaderMatch, arg) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\n\n\nasync function loadLazyRouteModule(route, mapRouteProperties, manifest) {\n  if (!route.lazy) {\n    return;\n  }\n\n  let lazyRoute = await route.lazy(); // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n\n  if (!route.lazy) {\n    return;\n  }\n\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\"); // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n\n  let routeUpdates = {};\n\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue = routeToUpdate[lazyRouteProperty];\n    let isPropertyStaticallyDefined = staticRouteValue !== undefined && // This property isn't static since it should always be updated based\n    // on the route updates\n    lazyRouteProperty !== \"hasErrorBoundary\";\n    warning(!isPropertyStaticallyDefined, \"Route \\\"\" + routeToUpdate.id + \"\\\" has a static property \\\"\" + lazyRouteProperty + \"\\\" \" + \"defined but its lazy function is also returning a value for this property. \" + (\"The lazy route property \\\"\" + lazyRouteProperty + \"\\\" will be ignored.\"));\n\n    if (!isPropertyStaticallyDefined && !immutableRouteKeys.has(lazyRouteProperty)) {\n      routeUpdates[lazyRouteProperty] = lazyRoute[lazyRouteProperty];\n    }\n  } // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n\n\n  Object.assign(routeToUpdate, routeUpdates); // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n\n  Object.assign(routeToUpdate, _extends({}, mapRouteProperties(routeToUpdate), {\n    lazy: undefined\n  }));\n} // Default implementation of `dataStrategy` which fetches all loaders in parallel\n\n\nfunction defaultDataStrategy(opts) {\n  return Promise.all(opts.matches.map(m => m.resolve()));\n}\n\nasync function callDataStrategyImpl(dataStrategyImpl, type, request, matchesToLoad, matches, manifest, mapRouteProperties, requestContext) {\n  let routeIdsToLoad = matchesToLoad.reduce((acc, m) => acc.add(m.route.id), new Set());\n  let loadedMatches = new Set(); // Send all matches here to allow for a middleware-type implementation.\n  // handler will be a no-op for unneeded routes and we filter those results\n  // back out below.\n\n  let results = await dataStrategyImpl({\n    matches: matches.map(match => {\n      let shouldLoad = routeIdsToLoad.has(match.route.id); // `resolve` encapsulates the route.lazy, executing the\n      // loader/action, and mapping return values/thrown errors to a\n      // HandlerResult.  Users can pass a callback to take fine-grained control\n      // over the execution of the loader/action\n\n      let resolve = handlerOverride => {\n        loadedMatches.add(match.route.id);\n        return shouldLoad ? callLoaderOrAction(type, request, match, manifest, mapRouteProperties, handlerOverride, requestContext) : Promise.resolve({\n          type: ResultType.data,\n          result: undefined\n        });\n      };\n\n      return _extends({}, match, {\n        shouldLoad,\n        resolve\n      });\n    }),\n    request,\n    params: matches[0].params,\n    context: requestContext\n  }); // Throw if any loadRoute implementations not called since they are what\n  // ensures a route is fully loaded\n\n  matches.forEach(m => invariant(loadedMatches.has(m.route.id), \"`match.resolve()` was not called for route id \\\"\" + m.route.id + \"\\\". \" + \"You must call `match.resolve()` on every match passed to \" + \"`dataStrategy` to ensure all routes are properly loaded.\")); // Filter out any middleware-only matches for which we didn't need to run handlers\n\n  return results.filter((_, i) => routeIdsToLoad.has(matches[i].route.id));\n} // Default logic for calling a loader/action is the user has no specified a dataStrategy\n\n\nasync function callLoaderOrAction(type, request, match, manifest, mapRouteProperties, handlerOverride, staticContext) {\n  let result;\n  let onReject;\n\n  let runHandler = handler => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject; // This will never resolve so safe to type it as Promise<HandlerResult> to\n    // satisfy the function return value\n\n    let abortPromise = new Promise((_, r) => reject = r);\n\n    onReject = () => reject();\n\n    request.signal.addEventListener(\"abort\", onReject);\n\n    let actualHandler = ctx => {\n      if (typeof handler !== \"function\") {\n        return Promise.reject(new Error(\"You cannot call the handler for a route which defines a boolean \" + (\"\\\"\" + type + \"\\\" [routeId: \" + match.route.id + \"]\")));\n      }\n\n      return handler({\n        request,\n        params: match.params,\n        context: staticContext\n      }, ...(ctx !== undefined ? [ctx] : []));\n    };\n\n    let handlerPromise;\n\n    if (handlerOverride) {\n      handlerPromise = handlerOverride(ctx => actualHandler(ctx));\n    } else {\n      handlerPromise = (async () => {\n        try {\n          let val = await actualHandler();\n          return {\n            type: \"data\",\n            result: val\n          };\n        } catch (e) {\n          return {\n            type: \"error\",\n            result: e\n          };\n        }\n      })();\n    }\n\n    return Promise.race([handlerPromise, abortPromise]);\n  };\n\n  try {\n    let handler = match.route[type];\n\n    if (match.route.lazy) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let handlerError;\n        let [value] = await Promise.all([// If the handler throws, don't let it immediately bubble out,\n        // since we need to let the lazy() execution finish so we know if this\n        // route has a boundary that can handle the error\n        runHandler(handler).catch(e => {\n          handlerError = e;\n        }), loadLazyRouteModule(match.route, mapRouteProperties, manifest)]);\n\n        if (handlerError !== undefined) {\n          throw handlerError;\n        }\n\n        result = value;\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadLazyRouteModule(match.route, mapRouteProperties, manifest);\n        handler = match.route[type];\n\n        if (handler) {\n          // Handler still runs even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return {\n            type: ResultType.data,\n            result: undefined\n          };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n\n    invariant(result.result !== undefined, \"You defined \" + (type === \"action\" ? \"an action\" : \"a loader\") + \" for route \" + (\"\\\"\" + match.route.id + \"\\\" but didn't return anything from your `\" + type + \"` \") + \"function. Please return a value or `null`.\");\n  } catch (e) {\n    // We should already be catching and converting normal handler executions to\n    // HandlerResults and returning them, so anything that throws here is an\n    // unexpected error we still need to wrap\n    return {\n      type: ResultType.error,\n      result: e\n    };\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n\n  return result;\n}\n\nasync function convertHandlerResultToDataResult(handlerResult) {\n  let {\n    result,\n    type,\n    status\n  } = handlerResult;\n\n  if (isResponse(result)) {\n    let data;\n\n    try {\n      let contentType = result.headers.get(\"Content-Type\"); // Check between word boundaries instead of startsWith() due to the last\n      // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n\n      if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n        if (result.body == null) {\n          data = null;\n        } else {\n          data = await result.json();\n        }\n      } else {\n        data = await result.text();\n      }\n    } catch (e) {\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n\n    if (type === ResultType.error) {\n      return {\n        type: ResultType.error,\n        error: new ErrorResponseImpl(result.status, result.statusText, data),\n        statusCode: result.status,\n        headers: result.headers\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers\n    };\n  }\n\n  if (type === ResultType.error) {\n    return {\n      type: ResultType.error,\n      error: result,\n      statusCode: isRouteErrorResponse(result) ? result.status : status\n    };\n  }\n\n  if (isDeferredData(result)) {\n    var _result$init, _result$init2;\n\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status,\n      headers: ((_result$init2 = result.init) == null ? void 0 : _result$init2.headers) && new Headers(result.init.headers)\n    };\n  }\n\n  return {\n    type: ResultType.data,\n    data: result,\n    statusCode: status\n  };\n} // Support relative routing in internal redirects\n\n\nfunction normalizeRelativeRoutingRedirectResponse(response, request, routeId, matches, basename, v7_relativeSplatPath) {\n  let location = response.headers.get(\"Location\");\n  invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\");\n\n  if (!ABSOLUTE_URL_REGEX.test(location)) {\n    let trimmedMatches = matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1);\n    location = normalizeTo(new URL(request.url), trimmedMatches, basename, true, location, v7_relativeSplatPath);\n    response.headers.set(\"Location\", location);\n  }\n\n  return response;\n}\n\nfunction normalizeRedirectLocation(location, currentUrl, basename) {\n  if (ABSOLUTE_URL_REGEX.test(location)) {\n    // Strip off the protocol+origin for same-origin + same-basename absolute redirects\n    let normalizedLocation = location;\n    let url = normalizedLocation.startsWith(\"//\") ? new URL(currentUrl.protocol + normalizedLocation) : new URL(normalizedLocation);\n    let isSameBasename = stripBasename(url.pathname, basename) != null;\n\n    if (url.origin === currentUrl.origin && isSameBasename) {\n      return url.pathname + url.search + url.hash;\n    }\n  }\n\n  return location;\n} // Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\n\n\nfunction createClientSideRequest(history, location, signal, submission) {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init = {\n    signal\n  };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let {\n      formMethod,\n      formEncType\n    } = submission; // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n\n    init.method = formMethod.toUpperCase();\n\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({\n        \"Content-Type\": formEncType\n      });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (formEncType === \"application/x-www-form-urlencoded\" && submission.formData) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData) {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n\n  return searchParams;\n}\n\nfunction convertSearchParamsToFormData(searchParams) {\n  let formData = new FormData();\n\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n\n  return formData;\n}\n\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingActionResult, activeDeferreds, skipLoaderErrorBubbling) {\n  // Fill in loaderData/errors from our loaders\n  let loaderData = {};\n  let errors = null;\n  let statusCode;\n  let foundError = false;\n  let loaderHeaders = {};\n  let pendingError = pendingActionResult && isErrorResult(pendingActionResult[1]) ? pendingActionResult[1].error : undefined; // Process loader results into state.loaderData/state.errors\n\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n\n    if (isErrorResult(result)) {\n      let error = result.error; // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n\n      if (pendingError !== undefined) {\n        error = pendingError;\n        pendingError = undefined;\n      }\n\n      errors = errors || {};\n\n      if (skipLoaderErrorBubbling) {\n        errors[id] = error;\n      } else {\n        // Look upwards from the matched route for the closest ancestor error\n        // boundary, defaulting to the root match.  Prefer higher error values\n        // if lower errors bubble to the same boundary\n        let boundaryMatch = findNearestBoundary(matches, id);\n\n        if (errors[boundaryMatch.route.id] == null) {\n          errors[boundaryMatch.route.id] = error;\n        }\n      } // Clear our any prior loaderData for the throwing route\n\n\n      loaderData[id] = undefined; // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data; // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n\n        if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n          statusCode = result.statusCode;\n        }\n\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      } else {\n        loaderData[id] = result.data; // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n\n        if (result.statusCode && result.statusCode !== 200 && !foundError) {\n          statusCode = result.statusCode;\n        }\n\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      }\n    }\n  }); // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n\n  if (pendingError !== undefined && pendingActionResult) {\n    errors = {\n      [pendingActionResult[0]]: pendingError\n    };\n    loaderData[pendingActionResult[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders\n  };\n}\n\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingActionResult, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  let {\n    loaderData,\n    errors\n  } = processRouteLoaderData(matches, matchesToLoad, results, pendingActionResult, activeDeferreds, false // This method is only called client side so we always want to bubble\n  ); // Process results from our revalidating fetchers\n\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let {\n      key,\n      match,\n      controller\n    } = revalidatingFetchers[index];\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    let result = fetcherResults[index]; // Process fetcher non-redirect errors\n\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      continue;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match == null ? void 0 : match.route.id);\n\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, {\n          [boundaryMatch.route.id]: result.error\n        });\n      }\n\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return {\n    loaderData,\n    errors\n  };\n}\n\nfunction mergeLoaderData(loaderData, newLoaderData, matches, errors) {\n  let mergedLoaderData = _extends({}, newLoaderData);\n\n  for (let match of matches) {\n    let id = match.route.id;\n\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n\n  return mergedLoaderData;\n}\n\nfunction getActionDataForCommit(pendingActionResult) {\n  if (!pendingActionResult) {\n    return {};\n  }\n\n  return isErrorResult(pendingActionResult[1]) ? {\n    // Clear out prior actionData on errors\n    actionData: {}\n  } : {\n    actionData: {\n      [pendingActionResult[0]]: pendingActionResult[1].data\n    }\n  };\n} // Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\n\n\nfunction findNearestBoundary(matches, routeId) {\n  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1) : [...matches];\n  return eligibleMatches.reverse().find(m => m.route.hasErrorBoundary === true) || matches[0];\n}\n\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.length === 1 ? routes[0] : routes.find(r => r.index || !r.path || r.path === \"/\") || {\n    id: \"__shim-error-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route\n    }],\n    route\n  };\n}\n\nfunction getInternalRouterError(status, _temp5) {\n  let {\n    pathname,\n    routeId,\n    method,\n    type\n  } = _temp5 === void 0 ? {} : _temp5;\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide a `loader` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = \"Route \\\"\" + routeId + \"\\\" does not match URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = \"No route matches URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method.toUpperCase() + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide an `action` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (method) {\n      errorMessage = \"Invalid request method \\\"\" + method.toUpperCase() + \"\\\"\";\n    }\n  }\n\n  return new ErrorResponseImpl(status || 500, statusText, new Error(errorMessage), true);\n} // Find any returned redirect errors, starting from the lowest match\n\n\nfunction findRedirect(results) {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n\n    if (isRedirectResult(result)) {\n      return {\n        result,\n        idx: i\n      };\n    }\n  }\n}\n\nfunction stripHashFromPath(path) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\n\nfunction isHashChangeOnly(a, b) {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  } // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n\n\n  return false;\n}\n\nfunction isHandlerResult(result) {\n  return result != null && typeof result === \"object\" && \"type\" in result && \"result\" in result && (result.type === ResultType.data || result.type === ResultType.error);\n}\n\nfunction isRedirectHandlerResult(result) {\n  return isResponse(result.result) && redirectStatusCodes.has(result.result.status);\n}\n\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\n\nfunction isDeferredData(value) {\n  let deferred = value;\n  return deferred && typeof deferred === \"object\" && typeof deferred.data === \"object\" && typeof deferred.subscribe === \"function\" && typeof deferred.cancel === \"function\" && typeof deferred.resolveData === \"function\";\n}\n\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\n\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method.toLowerCase());\n}\n\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method.toLowerCase());\n}\n\nasync function resolveDeferredResults(currentMatches, matchesToLoad, results, signals, isFetcher, currentLoaderData) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index]; // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n\n    if (!match) {\n      continue;\n    }\n\n    let currentMatch = currentMatches.find(m => m.route.id === match.route.id);\n    let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      let signal = signals[index];\n      invariant(signal, \"Expected an AbortSignal for revalidating fetcher deferred result\");\n      await resolveDeferredData(result, signal, isFetcher).then(result => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(result, signal, unwrap) {\n  if (unwrap === void 0) {\n    unwrap = false;\n  }\n\n  let aborted = await result.deferredData.resolveData(signal);\n\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data\n  };\n}\n\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(v => v === \"\");\n}\n\nfunction getTargetMatch(matches, location) {\n  let search = typeof location === \"string\" ? parsePath(location).search : location.search;\n\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  } // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n\n\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n\nfunction getSubmissionFromNavigation(navigation) {\n  let {\n    formMethod,\n    formAction,\n    formEncType,\n    text,\n    formData,\n    json\n  } = navigation;\n\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined\n    };\n  }\n}\n\nfunction getLoadingNavigation(location, submission) {\n  if (submission) {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text\n    };\n    return navigation;\n  } else {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined\n    };\n    return navigation;\n  }\n}\n\nfunction getSubmittingNavigation(location, submission) {\n  let navigation = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text\n  };\n  return navigation;\n}\n\nfunction getLoadingFetcher(submission, data) {\n  if (submission) {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data\n    };\n    return fetcher;\n  } else {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data\n    };\n    return fetcher;\n  }\n}\n\nfunction getSubmittingFetcher(submission, existingFetcher) {\n  let fetcher = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined\n  };\n  return fetcher;\n}\n\nfunction getDoneFetcher(data) {\n  let fetcher = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data\n  };\n  return fetcher;\n}\n\nfunction restoreAppliedTransitions(_window, transitions) {\n  try {\n    let sessionPositions = _window.sessionStorage.getItem(TRANSITIONS_STORAGE_KEY);\n\n    if (sessionPositions) {\n      let json = JSON.parse(sessionPositions);\n\n      for (let [k, v] of Object.entries(json || {})) {\n        if (v && Array.isArray(v)) {\n          transitions.set(k, new Set(v || []));\n        }\n      }\n    }\n  } catch (e) {// no-op, use default empty object\n  }\n}\n\nfunction persistAppliedTransitions(_window, transitions) {\n  if (transitions.size > 0) {\n    let json = {};\n\n    for (let [k, v] of transitions) {\n      json[k] = [...v];\n    }\n\n    try {\n      _window.sessionStorage.setItem(TRANSITIONS_STORAGE_KEY, JSON.stringify(json));\n    } catch (error) {\n      warning(false, \"Failed to save applied view transitions in sessionStorage (\" + error + \").\");\n    }\n  }\n} //#endregion\n\n\nexport { AbortedDeferredError, Action, IDLE_BLOCKER, IDLE_FETCHER, IDLE_NAVIGATION, UNSAFE_DEFERRED_SYMBOL, DeferredData as UNSAFE_DeferredData, ErrorResponseImpl as UNSAFE_ErrorResponseImpl, convertRouteMatchToUiMatch as UNSAFE_convertRouteMatchToUiMatch, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, getResolveToMatches as UNSAFE_getResolveToMatches, invariant as UNSAFE_invariant, warning as UNSAFE_warning, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, createStaticHandler, defer, generatePath, getStaticContextFromError, getToPathname, isDeferredData, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, redirectDocument, resolvePath, resolveTo, stripBasename };","map":{"version":3,"mappings":"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","names":["Action","PopStateEventType","options","initialEntries","initialIndex","v5Compat","entries","map","entry","index","createMemoryLocation","state","undefined","clampIndex","length","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","key","location","createLocation","pathname","warning","charAt","JSON","stringify","createHref","createPath","history","createURL","URL","encodeLocation","path","parsePath","search","hash","push","Push","nextLocation","splice","delta","replace","Replace","go","nextIndex","listen","fn","createBrowserLocation","window","globalHistory","usr","createBrowserHref","getUrlBasedHistory","createHashLocation","substr","startsWith","createHashHref","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","validateHashLocation","value","message","Error","cond","console","warn","e","createKey","random","toString","getHistoryState","idx","current","_ref","parsedPath","searchIndex","getLocation","validateLocation","defaultView","getIndex","replaceState","_extends","handlePop","historyState","pushState","error","DOMException","name","assign","origin","invariant","addEventListener","removeEventListener","ResultType","immutableRouteKeys","Set","isIndexRoute","route","convertRoutesToDataRoutes","routes","mapRouteProperties","parentPath","manifest","treePath","id","join","children","indexRoute","pathOrLayoutRoute","matchRoutes","locationArg","basename","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","i","decoded","decodePath","matchRouteBranch","match","loaderData","params","data","handle","parentsMeta","flattenRoute","relativePath","meta","caseSensitive","childrenIndex","joinPaths","routesMeta","concat","score","computeScore","forEach","_route$path","includes","exploded","explodeOptionalSegments","segments","split","first","rest","isOptional","endsWith","required","restExploded","result","subpath","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","initialScore","some","filter","reduce","segment","test","siblings","every","branch","matchedParams","matchedPathname","end","remainingPathname","matchPath","Object","pathnameBase","normalizePathname","generatePath","originalPath","prefix","p","String","array","isLastSegment","star","keyMatch","optional","param","pattern","matcher","compiledParams","compilePath","captureGroups","memo","paramName","splatValue","regexpSource","_","RegExp","v","decodeURIComponent","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","toPathname","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","getInvalidPathError","char","field","dest","getPathContributingMatches","v7_relativeSplatPath","pathMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","isEmptyPath","from","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","getToPathname","paths","json","init","responseInit","status","headers","Headers","has","set","Response","AbortedDeferredError","DeferredData","constructor","deferredKeys","Array","isArray","reject","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","signal","acc","_ref2","trackPromise","done","pendingKeysSet","add","promise","race","then","onSettle","catch","defineProperty","get","aborted","delete","undefinedError","emit","settledKey","subscribers","subscriber","subscribe","cancel","abort","k","resolveData","resolve","size","unwrappedData","_ref3","unwrapTrackedPromise","pendingKeys","isTrackedPromise","_tracked","_error","_data","defer","redirect","redirectDocument","response","ErrorResponseImpl","statusText","internal","isRouteErrorResponse","validMutationMethodsArr","validMutationMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","text","IDLE_FETCHER","IDLE_BLOCKER","proceed","reset","ABSOLUTE_URL_REGEX","defaultMapRouteProperties","hasErrorBoundary","Boolean","TRANSITIONS_STORAGE_KEY","createRouter","routerWindow","isBrowser","createElement","isServer","detectErrorBoundary","dataRoutes","inFlightDataRoutes","dataStrategyImpl","unstable_dataStrategy","defaultDataStrategy","future","v7_fetcherPersist","v7_normalizeFormMethod","v7_partialHydration","v7_prependBasename","unstable_skipActionErrorRevalidation","unlistenHistory","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","hydrationData","initialMatches","initialErrors","getInternalRouterError","getShortCircuitMatches","initialized","hasLazyRoutes","m","lazy","hasLoaders","loader","errors","isRouteInitialized","hydrate","findIndex","router","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","actionData","fetchers","Map","blockers","pendingAction","HistoryAction","pendingPreventScrollReset","pendingNavigationController","pendingViewTransitionEnabled","appliedViewTransitions","removePageHideEventListener","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeFetchers","deletedFetchers","activeDeferreds","blockerFunctions","ignoreNextHistoryUpdate","initialize","blockerKey","shouldBlockNavigation","currentLocation","updateBlocker","updateState","startNavigation","restoreAppliedTransitions","_saveAppliedTransitions","persistAppliedTransitions","initialHydration","dispose","clear","deleteFetcher","deleteBlocker","newState","opts","completedFetchers","deletedFetchersKeys","fetcher","unstable_viewTransitionOpts","viewTransitionOpts","unstable_flushSync","flushSync","completeNavigation","_temp","isActionReload","isMutationMethod","_isRedirect","keys","mergeLoaderData","priorPaths","toPaths","getSavedScrollPosition","navigate","normalizedPath","normalizeTo","fromRouteId","relative","submission","normalizeNavigateOptions","userReplace","pendingError","enableViewTransition","unstable_viewTransition","revalidate","interruptActiveLoads","startUninterruptedRevalidation","overrideNavigation","saveScrollPosition","routesToUse","loadingNavigation","notFoundMatches","cancelActiveDeferreds","isHashChangeOnly","request","createClientSideRequest","pendingActionResult","findNearestBoundary","type","actionResult","handleAction","shortCircuited","getLoadingNavigation","handleLoaders","fetcherSubmission","getActionDataForCommit","getSubmittingNavigation","actionMatch","getTargetMatch","method","routeId","results","callDataStrategy","isRedirectResult","normalizeRedirectLocation","startRedirectNavigation","isDeferredResult","isErrorResult","boundaryMatch","activeSubmission","getSubmissionFromNavigation","matchesToLoad","revalidatingFetchers","getMatchesToLoad","updatedFetchers","markFetchRedirectsDone","rf","revalidatingFetcher","getLoadingFetcher","abortFetcher","abortPendingFetchRevalidations","f","loaderResults","fetcherResults","callLoadersAndMaybeResolveData","findRedirect","fetcherKey","processLoaderData","deferredData","didAbortFetchLoads","abortStaleFetchLoads","shouldUpdateFetchers","fetch","setFetcherError","handleFetcherAction","handleFetcherLoader","requestMatches","existingFetcher","updateFetcherState","getSubmittingFetcher","abortController","fetchRequest","originatingLoadId","actionResults","getDoneFetcher","revalidationRequest","loadId","loadFetcher","staleKey","doneFetcher","resolveDeferredData","_temp2","redirectLocation","isDocumentReload","redirectHistoryAction","callDataStrategyImpl","all","isRedirectHandlerResult","normalizeRelativeRoutingRedirectResponse","convertHandlerResultToDataResult","currentMatches","fetchersToLoad","fetcherRequest","resolveDeferredResults","getFetcher","deleteFetcherAndUpdateState","count","markFetchersDone","doneKeys","landedId","yeetedKeys","getBlocker","blocker","newBlocker","_ref4","blockerFunction","predicate","cancelledRouteIds","dfd","enableScrollRestoration","positions","getPosition","getKey","y","getScrollKey","convertRouteMatchToUiMatch","_internalSetRoutes","newRoutes","_internalFetchControllers","_internalActiveDeferreds","UNSAFE_DEFERRED_SYMBOL","Symbol","v7_throwAbortReason","query","_temp3","requestContext","skipLoaderErrorBubbling","isValidMethod","methodNotAllowedMatches","statusCode","loaderHeaders","actionHeaders","queryImpl","isResponse","queryRoute","_temp4","find","values","_result$activeDeferre","routeMatch","submit","loadRouteData","isHandlerResult","isRedirectResponse","isRouteRequest","throwStaticHandlerAbortedError","Location","loaderRequest","Request","context","getLoaderMatchesUntilBoundary","processRouteLoaderData","executedLoaders","fromEntries","getStaticContextFromError","newContext","_deepestRenderedBoundaryId","reason","isSubmissionNavigation","body","prependBasename","contextualMatches","activeRouteMatch","getResolveToMatches","hasNakedIndexQuery","normalizeFormMethod","isFetcher","getInvalidBodyError","rawFormMethod","toUpperCase","stripHashFromPath","FormData","URLSearchParams","_ref5","parse","searchParams","convertFormDataToSearchParams","convertSearchParamsToFormData","append","boundaryId","boundaryMatches","isInitialLoad","skipActionErrorRevalidation","currentUrl","nextUrl","actionStatus","shouldSkipRevalidation","navigationMatches","isNewLoader","currentRouteMatch","nextRouteMatch","shouldRevalidateLoader","currentParams","nextParams","unstable_actionStatus","defaultShouldRevalidate","isNewRouteInstance","fetcherMatches","fetcherMatch","shouldRevalidate","currentLoaderData","currentMatch","isNew","isMissingData","currentPath","loaderMatch","arg","routeChoice","loadLazyRouteModule","lazyRoute","routeToUpdate","routeUpdates","lazyRouteProperty","staticRouteValue","isPropertyStaticallyDefined","routeIdsToLoad","loadedMatches","shouldLoad","handlerOverride","callLoaderOrAction","staticContext","onReject","runHandler","handler","actualHandler","ctx","handlerPromise","val","handlerError","handlerResult","contentType","isDeferredData","deferred","_result$init","_result$init2","trimmedMatches","normalizedLocation","protocol","isSameBasename","foundError","newLoaderData","mergedLoaderData","hasOwnProperty","eligibleMatches","reverse","_temp5","errorMessage","signals","isRevalidatingLoader","unwrap","getAll","_window","transitions","sessionPositions","sessionStorage","getItem","setItem"],"sources":["/Users/alihabibi/Documents/GitHub/Safely-Different-App/Ali-loginpage/node_modules/@remix-run/router/history.ts","/Users/alihabibi/Documents/GitHub/Safely-Different-App/Ali-loginpage/node_modules/@remix-run/router/utils.ts","/Users/alihabibi/Documents/GitHub/Safely-Different-App/Ali-loginpage/node_modules/@remix-run/router/router.ts"],"sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n// TODO: (v7) Change the Location generic default from `any` to `unknown` and\n// remove Remix `useLocation` wrapper.\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location<State = any> extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: State;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n\n  /**\n   * The delta between this location and the former location in the history stack\n   */\n  delta: number | null;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. This may be either a URL or the pieces\n * of a URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Returns a URL for the given `to` value\n   *\n   * @param to - The destination URL\n   */\n  createURL(to: To): URL;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLACE navigations for data routers\n   * behave the same as POP\n   *\n   * @param to Unencoded path\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n  idx: number;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  function createHref(to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to: To) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\",\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 1 });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 0 });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({ action, location: nextLocation, delta });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n\n    // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path=\"*\">) since that matches internally against\n    // \"/*\" and we'd expect /#something to 404 in a hash router app.\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nexport function warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location, index: number): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  let index = getIndex()!;\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, \"\");\n  }\n\n  function getIndex(): number {\n    let state = globalHistory.state || { idx: null };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({ action, location: history.location, delta });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 1 });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 0 });\n    }\n  }\n\n  function createURL(to: To): URL {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base =\n      window.location.origin !== \"null\"\n        ? window.location.origin\n        : window.location.href;\n\n    let href = typeof to === \"string\" ? to : createPath(to);\n    // Treating this as a full URL will strip any trailing spaces so we need to\n    // pre-encode them since they might be part of a matching splat param from\n    // an ancestor route\n    href = href.replace(/ $/, \"%20\");\n    invariant(\n      base,\n      `No window.location.(origin|href) available to create URL for href: ${href}`\n    );\n    return new URL(href, base);\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { invariant, parsePath, warning } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: unknown;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  // We keep the raw Response for redirects so we can return it verbatim\n  response: Response;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: unknown;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\n/**\n * Result from a loader or action called via dataStrategy\n */\nexport interface HandlerResult {\n  type: \"data\" | \"error\";\n  result: unknown; // data, Error, Response, DeferredData\n  status?: number;\n}\n\ntype LowerCaseFormMethod = \"get\" | \"post\" | \"put\" | \"patch\" | \"delete\";\ntype UpperCaseFormMethod = Uppercase<LowerCaseFormMethod>;\n\n/**\n * Users can specify either lowercase or uppercase form methods on `<Form>`,\n * useSubmit(), `<fetcher.Form>`, etc.\n */\nexport type HTMLFormMethod = LowerCaseFormMethod | UpperCaseFormMethod;\n\n/**\n * Active navigation/fetcher form methods are exposed in lowercase on the\n * RouterState\n */\nexport type FormMethod = LowerCaseFormMethod;\nexport type MutationFormMethod = Exclude<FormMethod, \"get\">;\n\n/**\n * In v7, active navigation/fetcher form methods are exposed in uppercase on the\n * RouterState.  This is to align with the normalization done via fetch().\n */\nexport type V7_FormMethod = UpperCaseFormMethod;\nexport type V7_MutationFormMethod = Exclude<V7_FormMethod, \"GET\">;\n\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\"\n  | \"application/json\"\n  | \"text/plain\";\n\n// Thanks https://github.com/sindresorhus/type-fest!\ntype JsonObject = { [Key in string]: JsonValue } & {\n  [Key in string]?: JsonValue | undefined;\n};\ntype JsonArray = JsonValue[] | readonly JsonValue[];\ntype JsonPrimitive = string | number | boolean | null;\ntype JsonValue = JsonPrimitive | JsonObject | JsonArray;\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport type Submission =\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: FormData;\n      json: undefined;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: JsonValue;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: undefined;\n      text: string;\n    };\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs<Context> {\n  request: Request;\n  params: Params;\n  context?: Context;\n}\n\n// TODO: (v7) Change the defaults from any to unknown in and remove Remix wrappers:\n//   ActionFunction, ActionFunctionArgs, LoaderFunction, LoaderFunctionArgs\n//   Also, make them a type alias instead of an interface\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {}\n\n/**\n * Loaders and actions can return anything except `undefined` (`null` is a\n * valid return value if there is no data to return).  Responses are preferred\n * and will ease any future migration to Remix\n */\ntype DataFunctionValue = Response | NonNullable<unknown> | null;\n\ntype DataFunctionReturnValue = Promise<DataFunctionValue> | DataFunctionValue;\n\n/**\n * Route loader function signature\n */\nexport type LoaderFunction<Context = any> = {\n  (\n    args: LoaderFunctionArgs<Context>,\n    handlerCtx?: unknown\n  ): DataFunctionReturnValue;\n} & { hydrate?: boolean };\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction<Context = any> {\n  (\n    args: ActionFunctionArgs<Context>,\n    handlerCtx?: unknown\n  ): DataFunctionReturnValue;\n}\n\n/**\n * Arguments passed to shouldRevalidate function\n */\nexport interface ShouldRevalidateFunctionArgs {\n  currentUrl: URL;\n  currentParams: AgnosticDataRouteMatch[\"params\"];\n  nextUrl: URL;\n  nextParams: AgnosticDataRouteMatch[\"params\"];\n  formMethod?: Submission[\"formMethod\"];\n  formAction?: Submission[\"formAction\"];\n  formEncType?: Submission[\"formEncType\"];\n  text?: Submission[\"text\"];\n  formData?: Submission[\"formData\"];\n  json?: Submission[\"json\"];\n  unstable_actionStatus?: number;\n  actionResult?: any;\n  defaultShouldRevalidate: boolean;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: ShouldRevalidateFunctionArgs): boolean;\n}\n\n/**\n * Function provided by the framework-aware layers to set `hasErrorBoundary`\n * from the framework-aware `errorElement` prop\n *\n * @deprecated Use `mapRouteProperties` instead\n */\nexport interface DetectErrorBoundaryFunction {\n  (route: AgnosticRouteObject): boolean;\n}\n\nexport interface DataStrategyMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {\n  shouldLoad: boolean;\n  resolve: (\n    handlerOverride?: (\n      handler: (ctx?: unknown) => DataFunctionReturnValue\n    ) => Promise<HandlerResult>\n  ) => Promise<HandlerResult>;\n}\n\nexport interface DataStrategyFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {\n  matches: DataStrategyMatch[];\n}\n\nexport interface DataStrategyFunction {\n  (args: DataStrategyFunctionArgs): Promise<HandlerResult[]>;\n}\n\n/**\n * Function provided by the framework-aware layers to set any framework-specific\n * properties from framework-agnostic properties\n */\nexport interface MapRoutePropertiesFunction {\n  (route: AgnosticRouteObject): {\n    hasErrorBoundary: boolean;\n  } & Record<string, any>;\n}\n\n/**\n * Keys we cannot change from within a lazy() function. We spread all other keys\n * onto the route. Either they're meaningful to the router, or they'll get\n * ignored.\n */\nexport type ImmutableRouteKey =\n  | \"lazy\"\n  | \"caseSensitive\"\n  | \"path\"\n  | \"id\"\n  | \"index\"\n  | \"children\";\n\nexport const immutableRouteKeys = new Set<ImmutableRouteKey>([\n  \"lazy\",\n  \"caseSensitive\",\n  \"path\",\n  \"id\",\n  \"index\",\n  \"children\",\n]);\n\ntype RequireOne<T, Key = keyof T> = Exclude<\n  {\n    [K in keyof T]: K extends Key ? Omit<T, K> & Required<Pick<T, K>> : never;\n  }[keyof T],\n  undefined\n>;\n\n/**\n * lazy() function to load a route definition, which can add non-matching\n * related properties to a route\n */\nexport interface LazyRouteFunction<R extends AgnosticRouteObject> {\n  (): Promise<RequireOne<Omit<R, ImmutableRouteKey>>>;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction | boolean;\n  action?: ActionFunction | boolean;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n  lazy?: LazyRouteFunction<AgnosticBaseRouteObject>;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\nexport type RouteManifest = Record<string, AgnosticDataRouteObject | undefined>;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `:${infer Param}`\n    ? Param extends `${infer Optional}?`\n      ? Optional\n      : Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\nexport type PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\" | \"/*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise, return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if you could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  mapRouteProperties: MapRoutePropertiesFunction,\n  parentPath: number[] = [],\n  manifest: RouteManifest = {}\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !manifest[id],\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n      };\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n        children: undefined,\n      };\n      manifest[id] = pathOrLayoutRoute;\n\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(\n          route.children,\n          mapRouteProperties,\n          treePath,\n          manifest\n        );\n      }\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    let decoded = decodePath(pathname);\n    matches = matchRouteBranch<string, RouteObjectType>(branches[i], decoded);\n  }\n\n  return matches;\n}\n\nexport interface UIMatch<Data = unknown, Handle = unknown> {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: Data;\n  handle: Handle;\n}\n\nexport function convertRouteMatchToUiMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UIMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle,\n  };\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  let flattenRoute = (\n    route: RouteObjectType,\n    index: number,\n    relativePath?: string\n  ) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath:\n        relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta,\n    });\n  };\n  routes.forEach((route, index) => {\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !route.path?.includes(\"?\")) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n\n  return branches;\n}\n\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path: string): string[] {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n\n  let [first, ...rest] = segments;\n\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n\n  let result: string[] = [];\n\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(\n    ...restExploded.map((subpath) =>\n      subpath === \"\" ? required : [required, subpath].join(\"/\")\n    )\n  );\n\n  // Then, if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map((exploded) =>\n    path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded\n  );\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:[\\w-]+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  originalPath: Path,\n  params: {\n    [key in PathParam<Path>]: string | null;\n  } = {} as any\n): string {\n  let path: string = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(\n      false,\n      `Route path \"${path}\" will be treated as if it were ` +\n        `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n        `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n        `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n    );\n    path = path.replace(/\\*$/, \"/*\") as Path;\n  }\n\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n\n  const stringify = (p: any) =>\n    p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n\n  const segments = path\n    .split(/\\/+/)\n    .map((segment, index, array) => {\n      const isLastSegment = index === array.length - 1;\n\n      // only apply the splat if it's the last segment\n      if (isLastSegment && segment === \"*\") {\n        const star = \"*\" as PathParam<Path>;\n        // Apply the splat\n        return stringify(params[star]);\n      }\n\n      const keyMatch = segment.match(/^:([\\w-]+)(\\??)$/);\n      if (keyMatch) {\n        const [, key, optional] = keyMatch;\n        let param = params[key as PathParam<Path>];\n        invariant(optional === \"?\" || param != null, `Missing \":${key}\" param`);\n        return stringify(param);\n      }\n\n      // Remove any optional markers from optional static segments\n      return segment.replace(/\\?$/g, \"\");\n    })\n    // Remove empty segments\n    .filter((segment) => !!segment);\n\n  return prefix + segments.join(\"/\");\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, compiledParams] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = compiledParams.reduce<Mutable<Params>>(\n    (memo, { paramName, isOptional }, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      const value = captureGroups[index];\n      if (isOptional && !value) {\n        memo[paramName] = undefined;\n      } else {\n        memo[paramName] = (value || \"\").replace(/%2F/g, \"/\");\n      }\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\ntype CompiledPathParam = { paramName: string; isOptional?: boolean };\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, CompiledPathParam[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let params: CompiledPathParam[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^${}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(\n        /\\/:([\\w-]+)(\\?)?/g,\n        (_: string, paramName: string, isOptional) => {\n          params.push({ paramName, isOptional: isOptional != null });\n          return isOptional ? \"/?([^\\\\/]+)?\" : \"/([^\\\\/]+)\";\n        }\n      );\n\n  if (path.endsWith(\"*\")) {\n    params.push({ paramName: \"*\" });\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, params];\n}\n\nfunction decodePath(value: string) {\n  try {\n    return value\n      .split(\"/\")\n      .map((v) => decodeURIComponent(v).replace(/\\//g, \"%2F\"))\n      .join(\"/\");\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n// Return the array of pathnames for the current route matches - used to\n// generate the routePathnames input for resolveTo()\nexport function getResolveToMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[], v7_relativeSplatPath: boolean) {\n  let pathMatches = getPathContributingMatches(matches);\n\n  // When v7_relativeSplatPath is enabled, use the full pathname for the leaf\n  // match so we include splat values for \".\" links.  See:\n  // https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329\n  if (v7_relativeSplatPath) {\n    return pathMatches.map((match, idx) =>\n      idx === matches.length - 1 ? match.pathname : match.pathnameBase\n    );\n  }\n\n  return pathMatches.map((match) => match.pathnameBase);\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    // With relative=\"route\" (the default), each leading .. segment means\n    // \"go up one route\" instead of \"go up one URL segment\".  This is a key\n    // difference from how <a href> works and a major reason we call this a\n    // \"to\" value instead of a \"href\".\n    if (!isPathRelative && toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeysSet: Set<string> = new Set<string>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscribers: Set<(aborted: boolean, settledKey?: string) => void> =\n    new Set();\n  data: Record<string, unknown>;\n  init?: ResponseInit;\n  deferredKeys: string[] = [];\n\n  constructor(data: Record<string, unknown>, responseInit?: ResponseInit) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  private trackPromise(\n    key: string,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, undefined, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    // If the promise was resolved/rejected with undefined, we'll throw an error as you\n    // should always resolve with a value or null\n    if (error === undefined && data === undefined) {\n      let undefinedError = new Error(\n        `Deferred data for key \"${key}\" resolved/rejected with \\`undefined\\`, ` +\n          `you must resolve/reject with a value or \\`null\\`.`\n      );\n      Object.defineProperty(promise, \"_error\", { get: () => undefinedError });\n      this.emit(false, key);\n      return Promise.reject(undefinedError);\n    }\n\n    if (data === undefined) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    this.emit(false, key);\n    return data;\n  }\n\n  private emit(aborted: boolean, settledKey?: string) {\n    this.subscribers.forEach((subscriber) => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn: (aborted: boolean, settledKey?: string) => void) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport type DeferFunction = (\n  data: Record<string, unknown>,\n  init?: number | ResponseInit\n) => DeferredData;\n\nexport const defer: DeferFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  return new DeferredData(data, responseInit);\n};\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirectDocument: RedirectFunction = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\n\nexport type ErrorResponse = {\n  status: number;\n  statusText: string;\n  data: any;\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n *\n * We don't export the class for public use since it's an implementation\n * detail, but we export the interface above so folks can build their own\n * abstractions around instances via isRouteErrorResponse()\n */\nexport class ErrorResponseImpl implements ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n  private error?: Error;\n  private internal: boolean;\n\n  constructor(\n    status: number,\n    statusText: string | undefined,\n    data: any,\n    internal = false\n  ) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nexport function isRouteErrorResponse(error: any): error is ErrorResponse {\n  return (\n    error != null &&\n    typeof error.status === \"number\" &&\n    typeof error.statusText === \"string\" &&\n    typeof error.internal === \"boolean\" &&\n    \"data\" in error\n  );\n}\n","import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  invariant,\n  parsePath,\n  warning,\n} from \"./history\";\nimport type {\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  DataStrategyMatch,\n  AgnosticRouteObject,\n  DataResult,\n  DataStrategyFunction,\n  DataStrategyFunctionArgs,\n  DeferredData,\n  DeferredResult,\n  DetectErrorBoundaryFunction,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  HTMLFormMethod,\n  HandlerResult,\n  ImmutableRouteKey,\n  MapRoutePropertiesFunction,\n  MutationFormMethod,\n  RedirectResult,\n  RouteData,\n  RouteManifest,\n  ShouldRevalidateFunctionArgs,\n  Submission,\n  SuccessResult,\n  UIMatch,\n  V7_FormMethod,\n  V7_MutationFormMethod,\n} from \"./utils\";\nimport {\n  ErrorResponseImpl,\n  ResultType,\n  convertRouteMatchToUiMatch,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  getResolveToMatches,\n  immutableRouteKeys,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  resolveTo,\n  stripBasename,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the future config for the router\n   */\n  get future(): FutureConfig;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the window associated with the router\n   */\n  get window(): RouterInit[\"window\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): Promise<void>;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To | null, opts?: RouterNavigateOptions): Promise<void>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to URL encode a destination path according to the internal\n   * history implementation\n   * @param to\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get a navigation blocker\n   * @param key The identifier for the blocker\n   * @param fn The blocker function implementation\n   */\n  getBlocker(key: string, fn: BlockerFunction): Blocker;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete a navigation blocker\n   * @param key The identifier for the blocker\n   */\n  deleteBlocker(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * HMR needs to pass in-flight route updates to React Router\n   * TODO: Replace this with granular route update APIs (addRoute, updateRoute, deleteRoute)\n   */\n  _internalSetRoutes(routes: AgnosticRouteObject[]): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n\n  /**\n   * Map of current blockers\n   */\n  blockers: Map<string, Blocker>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface FutureConfig {\n  v7_fetcherPersist: boolean;\n  v7_normalizeFormMethod: boolean;\n  v7_partialHydration: boolean;\n  v7_prependBasename: boolean;\n  v7_relativeSplatPath: boolean;\n  unstable_skipActionErrorRevalidation: boolean;\n}\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  routes: AgnosticRouteObject[];\n  history: History;\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<FutureConfig>;\n  hydrationData?: HydrationState;\n  window?: Window;\n  unstable_dataStrategy?: DataStrategyFunction;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  basename: Router[\"basename\"];\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  activeDeferreds: Record<string, DeferredData> | null;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(\n    request: Request,\n    opts?: {\n      requestContext?: unknown;\n      skipLoaderErrorBubbling?: boolean;\n      unstable_dataStrategy?: DataStrategyFunction;\n    }\n  ): Promise<StaticHandlerContext | Response>;\n  queryRoute(\n    request: Request,\n    opts?: {\n      routeId?: string;\n      requestContext?: unknown;\n      unstable_dataStrategy?: DataStrategyFunction;\n    }\n  ): Promise<any>;\n}\n\ntype ViewTransitionOpts = {\n  currentLocation: Location;\n  nextLocation: Location;\n};\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (\n    state: RouterState,\n    opts: {\n      deletedFetchers: string[];\n      unstable_viewTransitionOpts?: ViewTransitionOpts;\n      unstable_flushSync: boolean;\n    }\n  ): void;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UIMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\nexport type RelativeRoutingType = \"route\" | \"path\";\n\n// Allowed for any navigation or fetch\ntype BaseNavigateOrFetchOptions = {\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n  unstable_flushSync?: boolean;\n};\n\n// Only allowed for navigations\ntype BaseNavigateOptions = BaseNavigateOrFetchOptions & {\n  replace?: boolean;\n  state?: any;\n  fromRouteId?: string;\n  unstable_viewTransition?: boolean;\n};\n\n// Only allowed for submission navigations\ntype BaseSubmissionOptions = {\n  formMethod?: HTMLFormMethod;\n  formEncType?: FormEncType;\n} & (\n  | { formData: FormData; body?: undefined }\n  | { formData?: undefined; body: any }\n);\n\n/**\n * Options for a navigate() call for a normal (non-submission) navigation\n */\ntype LinkNavigateOptions = BaseNavigateOptions;\n\n/**\n * Options for a navigate() call for a submission navigation\n */\ntype SubmissionNavigateOptions = BaseNavigateOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to navigate() for a navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options for a fetch() load\n */\ntype LoadFetchOptions = BaseNavigateOrFetchOptions;\n\n/**\n * Options for a fetch() submission\n */\ntype SubmitFetchOptions = BaseNavigateOrFetchOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions = LoadFetchOptions | SubmitFetchOptions;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    json: undefined;\n    text: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    text: Submission[\"text\"];\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    text: undefined;\n    formData: undefined;\n    json: undefined;\n    data: TData | undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    data: TData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    text: Submission[\"text\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    data: TData | undefined;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface BlockerBlocked {\n  state: \"blocked\";\n  reset(): void;\n  proceed(): void;\n  location: Location;\n}\n\ninterface BlockerUnblocked {\n  state: \"unblocked\";\n  reset: undefined;\n  proceed: undefined;\n  location: undefined;\n}\n\ninterface BlockerProceeding {\n  state: \"proceeding\";\n  reset: undefined;\n  proceed: undefined;\n  location: Location;\n}\n\nexport type Blocker = BlockerUnblocked | BlockerBlocked | BlockerProceeding;\n\nexport type BlockerFunction = (args: {\n  currentLocation: Location;\n  nextLocation: Location;\n  historyAction: HistoryAction;\n}) => boolean;\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ntype PendingActionResult = [string, SuccessResult | ErrorResult];\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Tuple for the returned or thrown value from the current action.  The routeId\n   * is the action route for success and the bubbled boundary route for errors.\n   */\n  pendingActionResult?: PendingActionResult;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Cached info for active fetcher.load() instances so they can participate\n * in revalidation\n */\ninterface FetchLoadMatch {\n  routeId: string;\n  path: string;\n}\n\n/**\n * Identified fetcher.load() calls that need to be revalidated\n */\ninterface RevalidatingFetcher extends FetchLoadMatch {\n  key: string;\n  match: AgnosticDataRouteMatch | null;\n  matches: AgnosticDataRouteMatch[] | null;\n  controller: AbortController | null;\n}\n\nconst validMutationMethodsArr: MutationFormMethod[] = [\n  \"post\",\n  \"put\",\n  \"patch\",\n  \"delete\",\n];\nconst validMutationMethods = new Set<MutationFormMethod>(\n  validMutationMethodsArr\n);\n\nconst validRequestMethodsArr: FormMethod[] = [\n  \"get\",\n  ...validMutationMethodsArr,\n];\nconst validRequestMethods = new Set<FormMethod>(validRequestMethodsArr);\n\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_BLOCKER: BlockerUnblocked = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined,\n};\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\nconst defaultMapRouteProperties: MapRoutePropertiesFunction = (route) => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary),\n});\n\nconst TRANSITIONS_STORAGE_KEY = \"remix-router-transitions\";\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  const routerWindow = init.window\n    ? init.window\n    : typeof window !== \"undefined\"\n    ? window\n    : undefined;\n  const isBrowser =\n    typeof routerWindow !== \"undefined\" &&\n    typeof routerWindow.document !== \"undefined\" &&\n    typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n\n  // Routes keyed by ID\n  let manifest: RouteManifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(\n    init.routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n  let inFlightDataRoutes: AgnosticDataRouteObject[] | undefined;\n  let basename = init.basename || \"/\";\n  let dataStrategyImpl = init.unstable_dataStrategy || defaultDataStrategy;\n  // Config driven behavior flags\n  let future: FutureConfig = {\n    v7_fetcherPersist: false,\n    v7_normalizeFormMethod: false,\n    v7_partialHydration: false,\n    v7_prependBasename: false,\n    v7_relativeSplatPath: false,\n    unstable_skipActionErrorRevalidation: false,\n    ...init.future,\n  };\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname,\n    });\n    let { matches, route } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  let initialized: boolean;\n  let hasLazyRoutes = initialMatches.some((m) => m.route.lazy);\n  let hasLoaders = initialMatches.some((m) => m.route.loader);\n  if (hasLazyRoutes) {\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    initialized = false;\n  } else if (!hasLoaders) {\n    // If we've got no loaders to run, then we're good to go\n    initialized = true;\n  } else if (future.v7_partialHydration) {\n    // If partial hydration is enabled, we're initialized so long as we were\n    // provided with hydrationData for every route with a loader, and no loaders\n    // were marked for explicit hydration\n    let loaderData = init.hydrationData ? init.hydrationData.loaderData : null;\n    let errors = init.hydrationData ? init.hydrationData.errors : null;\n    let isRouteInitialized = (m: AgnosticDataRouteMatch) => {\n      // No loader, nothing to initialize\n      if (!m.route.loader) {\n        return true;\n      }\n      // Explicitly opting-in to running on hydration\n      if (\n        typeof m.route.loader === \"function\" &&\n        m.route.loader.hydrate === true\n      ) {\n        return false;\n      }\n      // Otherwise, initialized if hydrated with data or an error\n      return (\n        (loaderData && loaderData[m.route.id] !== undefined) ||\n        (errors && errors[m.route.id] !== undefined)\n      );\n    };\n\n    // If errors exist, don't consider routes below the boundary\n    if (errors) {\n      let idx = initialMatches.findIndex(\n        (m) => errors![m.route.id] !== undefined\n      );\n      initialized = initialMatches.slice(0, idx + 1).every(isRouteInitialized);\n    } else {\n      initialized = initialMatches.every(isRouteInitialized);\n    }\n  } else {\n    // Without partial hydration - we're initialized if we were provided any\n    // hydrationData - which is expected to be complete\n    initialized = init.hydrationData != null;\n  }\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n\n  // Should the current navigation enable document.startViewTransition?\n  let pendingViewTransitionEnabled = false;\n\n  // Store applied view transitions so we can apply them on POP\n  let appliedViewTransitions: Map<string, Set<string>> = new Map<\n    string,\n    Set<string>\n  >();\n\n  // Cleanup function for persisting applied transitions to sessionStorage\n  let removePageHideEventListener: (() => void) | null = null;\n\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: string[] = [];\n\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set<string>();\n\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n\n  // Ref-count mounted fetchers so we know when it's ok to clean them up\n  let activeFetchers = new Map<string, number>();\n\n  // Fetchers that have requested a delete when using v7_fetcherPersist,\n  // they'll be officially removed after they return to idle\n  let deletedFetchers = new Set<string>();\n\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map<string, BlockerFunction>();\n\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let ignoreNextHistoryUpdate = false;\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location, delta }) => {\n        // Ignore this event if it was just us resetting the URL from a\n        // blocked POP navigation\n        if (ignoreNextHistoryUpdate) {\n          ignoreNextHistoryUpdate = false;\n          return;\n        }\n\n        warning(\n          blockerFunctions.size === 0 || delta != null,\n          \"You are trying to use a blocker on a POP navigation to a location \" +\n            \"that was not created by @remix-run/router. This will fail silently in \" +\n            \"production. This can happen if you are navigating outside the router \" +\n            \"via `window.history.pushState`/`window.location.hash` instead of using \" +\n            \"router navigation APIs.  This can also happen if you are using \" +\n            \"createHashRouter and the user manually changes the URL.\"\n        );\n\n        let blockerKey = shouldBlockNavigation({\n          currentLocation: state.location,\n          nextLocation: location,\n          historyAction,\n        });\n\n        if (blockerKey && delta != null) {\n          // Restore the URL to match the current UI, but don't update router state\n          ignoreNextHistoryUpdate = true;\n          init.history.go(delta * -1);\n\n          // Put the blocker into a blocked state\n          updateBlocker(blockerKey, {\n            state: \"blocked\",\n            location,\n            proceed() {\n              updateBlocker(blockerKey!, {\n                state: \"proceeding\",\n                proceed: undefined,\n                reset: undefined,\n                location,\n              });\n              // Re-do the same POP navigation we just blocked\n              init.history.go(delta);\n            },\n            reset() {\n              let blockers = new Map(state.blockers);\n              blockers.set(blockerKey!, IDLE_BLOCKER);\n              updateState({ blockers });\n            },\n          });\n          return;\n        }\n\n        return startNavigation(historyAction, location);\n      }\n    );\n\n    if (isBrowser) {\n      // FIXME: This feels gross.  How can we cleanup the lines between\n      // scrollRestoration/appliedTransitions persistance?\n      restoreAppliedTransitions(routerWindow, appliedViewTransitions);\n      let _saveAppliedTransitions = () =>\n        persistAppliedTransitions(routerWindow, appliedViewTransitions);\n      routerWindow.addEventListener(\"pagehide\", _saveAppliedTransitions);\n      removePageHideEventListener = () =>\n        routerWindow.removeEventListener(\"pagehide\", _saveAppliedTransitions);\n    }\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location, {\n        initialHydration: true,\n      });\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    if (removePageHideEventListener) {\n      removePageHideEventListener();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(\n    newState: Partial<RouterState>,\n    opts: {\n      flushSync?: boolean;\n      viewTransitionOpts?: ViewTransitionOpts;\n    } = {}\n  ): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n\n    // Prep fetcher cleanup so we can tell the UI which fetcher data entries\n    // can be removed\n    let completedFetchers: string[] = [];\n    let deletedFetchersKeys: string[] = [];\n\n    if (future.v7_fetcherPersist) {\n      state.fetchers.forEach((fetcher, key) => {\n        if (fetcher.state === \"idle\") {\n          if (deletedFetchers.has(key)) {\n            // Unmounted from the UI and can be totally removed\n            deletedFetchersKeys.push(key);\n          } else {\n            // Returned to idle but still mounted in the UI, so semi-remains for\n            // revalidations and such\n            completedFetchers.push(key);\n          }\n        }\n      });\n    }\n\n    // Iterate over a local copy so that if flushSync is used and we end up\n    // removing and adding a new subscriber due to the useCallback dependencies,\n    // we don't get ourselves into a loop calling the new subscriber immediately\n    [...subscribers].forEach((subscriber) =>\n      subscriber(state, {\n        deletedFetchers: deletedFetchersKeys,\n        unstable_viewTransitionOpts: opts.viewTransitionOpts,\n        unstable_flushSync: opts.flushSync === true,\n      })\n    );\n\n    // Remove idle fetchers from state since we only care about in-flight fetchers.\n    if (future.v7_fetcherPersist) {\n      completedFetchers.forEach((key) => state.fetchers.delete(key));\n      deletedFetchersKeys.forEach((key) => deleteFetcher(key));\n    }\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>,\n    { flushSync }: { flushSync?: boolean } = {}\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      isMutationMethod(state.navigation.formMethod) &&\n      state.navigation.state === \"loading\" &&\n      location.state?._isRedirect !== true;\n\n    let actionData: RouteData | null;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData\n      ? mergeLoaderData(\n          state.loaderData,\n          newState.loaderData,\n          newState.matches || [],\n          newState.errors\n        )\n      : state.loaderData;\n\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    let blockers = state.blockers;\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));\n    }\n\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset =\n      pendingPreventScrollReset === true ||\n      (state.navigation.formMethod != null &&\n        isMutationMethod(state.navigation.formMethod) &&\n        location.state?._isRedirect !== true);\n\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    let viewTransitionOpts: ViewTransitionOpts | undefined;\n\n    // On POP, enable transitions if they were enabled on the original navigation\n    if (pendingAction === HistoryAction.Pop) {\n      // Forward takes precedence so they behave like the original navigation\n      let priorPaths = appliedViewTransitions.get(state.location.pathname);\n      if (priorPaths && priorPaths.has(location.pathname)) {\n        viewTransitionOpts = {\n          currentLocation: state.location,\n          nextLocation: location,\n        };\n      } else if (appliedViewTransitions.has(location.pathname)) {\n        // If we don't have a previous forward nav, assume we're popping back to\n        // the new location and enable if that location previously enabled\n        viewTransitionOpts = {\n          currentLocation: location,\n          nextLocation: state.location,\n        };\n      }\n    } else if (pendingViewTransitionEnabled) {\n      // Store the applied transition on PUSH/REPLACE\n      let toPaths = appliedViewTransitions.get(state.location.pathname);\n      if (toPaths) {\n        toPaths.add(location.pathname);\n      } else {\n        toPaths = new Set<string>([location.pathname]);\n        appliedViewTransitions.set(state.location.pathname, toPaths);\n      }\n      viewTransitionOpts = {\n        currentLocation: state.location,\n        nextLocation: location,\n      };\n    }\n\n    updateState(\n      {\n        ...newState, // matches, errors, fetchers go through as-is\n        actionData,\n        loaderData,\n        historyAction: pendingAction,\n        location,\n        initialized: true,\n        navigation: IDLE_NAVIGATION,\n        revalidation: \"idle\",\n        restoreScrollPosition: getSavedScrollPosition(\n          location,\n          newState.matches || state.matches\n        ),\n        preventScrollReset,\n        blockers,\n      },\n      {\n        viewTransitionOpts,\n        flushSync: flushSync === true,\n      }\n    );\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    pendingViewTransitionEnabled = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To | null,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      to,\n      future.v7_relativeSplatPath,\n      opts?.fromRouteId,\n      opts?.relative\n    );\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      false,\n      normalizedPath,\n      opts\n    );\n\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = {\n      ...nextLocation,\n      ...init.history.encodeLocation(nextLocation),\n    };\n\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n\n    let historyAction = HistoryAction.Push;\n\n    if (userReplace === true) {\n      historyAction = HistoryAction.Replace;\n    } else if (userReplace === false) {\n      // no-op\n    } else if (\n      submission != null &&\n      isMutationMethod(submission.formMethod) &&\n      submission.formAction === state.location.pathname + state.location.search\n    ) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = HistoryAction.Replace;\n    }\n\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction,\n    });\n\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey!, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation,\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey!, IDLE_BLOCKER);\n          updateState({ blockers });\n        },\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n      enableViewTransition: opts && opts.unstable_viewTransition,\n      flushSync,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      { overrideNavigation: state.navigation }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      initialHydration?: boolean;\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponseImpl;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n      enableViewTransition?: boolean;\n      flushSync?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename);\n    let flushSync = (opts && opts.flushSync) === true;\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(routesToUse);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(\n        location,\n        {\n          matches: notFoundMatches,\n          loaderData: {},\n          errors: {\n            [route.id]: error,\n          },\n        },\n        { flushSync }\n      );\n      return;\n    }\n\n    // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial load will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n    if (\n      state.initialized &&\n      !isRevalidationRequired &&\n      isHashChangeOnly(state.location, location) &&\n      !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))\n    ) {\n      completeNavigation(location, { matches }, { flushSync });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(\n      init.history,\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionResult: PendingActionResult | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingActionResult = [\n        findNearestBoundary(matches).route.id,\n        { type: ResultType.error, error: opts.pendingError },\n      ];\n    } else if (\n      opts &&\n      opts.submission &&\n      isMutationMethod(opts.submission.formMethod)\n    ) {\n      // Call action if we received an action submission\n      let actionResult = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        { replace: opts.replace, flushSync }\n      );\n\n      if (actionResult.shortCircuited) {\n        return;\n      }\n\n      pendingActionResult = actionResult.pendingActionResult;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n      flushSync = false;\n\n      // Create a GET request for the loaders\n      request = createClientSideRequest(\n        init.history,\n        request.url,\n        request.signal\n      );\n    }\n\n    // Call loaders\n    let { shortCircuited, loaderData, errors } = await handleLoaders(\n      request,\n      location,\n      matches,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.fetcherSubmission,\n      opts && opts.replace,\n      opts && opts.initialHydration === true,\n      flushSync,\n      pendingActionResult\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches,\n      ...getActionDataForCommit(pendingActionResult),\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    opts: { replace?: boolean; flushSync?: boolean } = {}\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({ navigation }, { flushSync: opts.flushSync === true });\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id,\n        }),\n      };\n    } else {\n      let results = await callDataStrategy(\n        \"action\",\n        request,\n        [actionMatch],\n        matches\n      );\n      result = results[0];\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace: boolean;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        let location = normalizeRedirectLocation(\n          result.response.headers.get(\"Location\")!,\n          new URL(request.url),\n          basename\n        );\n        replace = location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(request, result, {\n        submission,\n        replace,\n      });\n      return { shortCircuited: true };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        pendingActionResult: [boundaryMatch.route.id, result],\n      };\n    }\n\n    return {\n      pendingActionResult: [actionMatch.route.id, result],\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    fetcherSubmission?: Submission,\n    replace?: boolean,\n    initialHydration?: boolean,\n    flushSync?: boolean,\n    pendingActionResult?: PendingActionResult\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation =\n      overrideNavigation || getLoadingNavigation(location, submission);\n\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission =\n      submission ||\n      fetcherSubmission ||\n      getSubmissionFromNavigation(loadingNavigation);\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      activeSubmission,\n      location,\n      future.v7_partialHydration && initialHydration === true,\n      future.unstable_skipActionErrorRevalidation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      deletedFetchers,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      pendingActionResult\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(\n        location,\n        {\n          matches,\n          loaderData: {},\n          // Commit pending error if we're short circuiting\n          errors:\n            pendingActionResult && isErrorResult(pendingActionResult[1])\n              ? { [pendingActionResult[0]]: pendingActionResult[1].error }\n              : null,\n          ...getActionDataForCommit(pendingActionResult),\n          ...(updatedFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n        },\n        { flushSync }\n      );\n      return { shortCircuited: true };\n    }\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    // If we have partialHydration enabled, then don't update the state for the\n    // initial data load since it's not a \"navigation\"\n    if (\n      !isUninterruptedRevalidation &&\n      (!future.v7_partialHydration || !initialHydration)\n    ) {\n      revalidatingFetchers.forEach((rf) => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher = getLoadingFetcher(\n          undefined,\n          fetcher ? fetcher.data : undefined\n        );\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n\n      let actionData: Record<string, RouteData> | null | undefined;\n      if (pendingActionResult && !isErrorResult(pendingActionResult[1])) {\n        // This is cast to `any` currently because `RouteData`uses any and it\n        // would be a breaking change to use any.\n        // TODO: v7 - change `RouteData` to use `unknown` instead of `any`\n        actionData = {\n          [pendingActionResult[0]]: pendingActionResult[1].data as any,\n        };\n      } else if (state.actionData) {\n        if (Object.keys(state.actionData).length === 0) {\n          actionData = null;\n        } else {\n          actionData = state.actionData;\n        }\n      }\n\n      updateState(\n        {\n          navigation: loadingNavigation,\n          ...(actionData !== undefined ? { actionData } : {}),\n          ...(revalidatingFetchers.length > 0\n            ? { fetchers: new Map(state.fetchers) }\n            : {}),\n        },\n        {\n          flushSync,\n        }\n      );\n    }\n\n    revalidatingFetchers.forEach((rf) => {\n      if (fetchControllers.has(rf.key)) {\n        abortFetcher(rf.key);\n      }\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((f) => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n\n    let { loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n    revalidatingFetchers.forEach((rf) => fetchControllers.delete(rf.key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect([...loaderResults, ...fetcherResults]);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey =\n          revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      await startRedirectNavigation(request, redirect.result, {\n        replace,\n      });\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingActionResult,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    // During partial hydration, preserve SSR errors for routes that don't re-run\n    if (future.v7_partialHydration && initialHydration && state.errors) {\n      Object.entries(state.errors)\n        .filter(([id]) => !matchesToLoad.some((m) => m.route.id === id))\n        .forEach(([routeId, error]) => {\n          errors = Object.assign(errors || {}, { [routeId]: error });\n        });\n    }\n\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers =\n      updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n\n    return {\n      loaderData,\n      errors,\n      ...(shouldUpdateFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n    };\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      href,\n      future.v7_relativeSplatPath,\n      routeId,\n      opts?.relative\n    );\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n\n    if (!matches) {\n      setFetcherError(\n        key,\n        routeId,\n        getInternalRouterError(404, { pathname: normalizedPath }),\n        { flushSync }\n      );\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      true,\n      normalizedPath,\n      opts\n    );\n\n    if (error) {\n      setFetcherError(key, routeId, error, { flushSync });\n      return;\n    }\n\n    let match = getTargetMatch(matches, path);\n\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(\n        key,\n        routeId,\n        path,\n        match,\n        matches,\n        flushSync,\n        submission\n      );\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, { routeId, path });\n    handleFetcherLoader(\n      key,\n      routeId,\n      path,\n      match,\n      matches,\n      flushSync,\n      submission\n    );\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    flushSync: boolean,\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action && !match.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId,\n      });\n      setFetcherError(key, routeId, error, { flushSync });\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {\n      flushSync,\n    });\n\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal,\n      submission\n    );\n    fetchControllers.set(key, abortController);\n\n    let originatingLoadId = incrementingLoadId;\n    let actionResults = await callDataStrategy(\n      \"action\",\n      fetchRequest,\n      [match],\n      requestMatches\n    );\n    let actionResult = actionResults[0];\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    // When using v7_fetcherPersist, we don't want errors bubbling up to the UI\n    // or redirects processed for unmounted fetchers so we just revert them to\n    // idle\n    if (future.v7_fetcherPersist && deletedFetchers.has(key)) {\n      if (isRedirectResult(actionResult) || isErrorResult(actionResult)) {\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      }\n      // Let SuccessResult's fall through for revalidation\n    } else {\n      if (isRedirectResult(actionResult)) {\n        fetchControllers.delete(key);\n        if (pendingNavigationLoadId > originatingLoadId) {\n          // A new navigation was kicked off after our action started, so that\n          // should take precedence over this redirect navigation.  We already\n          // set isRevalidationRequired so all loaders for the new route should\n          // fire unless opted out via shouldRevalidate\n          updateFetcherState(key, getDoneFetcher(undefined));\n          return;\n        } else {\n          fetchRedirectIds.add(key);\n          updateFetcherState(key, getLoadingFetcher(submission));\n          return startRedirectNavigation(fetchRequest, actionResult, {\n            fetcherSubmission: submission,\n          });\n        }\n      }\n\n      // Process any non-redirect errors thrown\n      if (isErrorResult(actionResult)) {\n        setFetcherError(key, routeId, actionResult.error);\n        return;\n      }\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(\n      init.history,\n      nextLocation,\n      abortController.signal\n    );\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(routesToUse, state.navigation.location, basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      submission,\n      nextLocation,\n      false,\n      future.unstable_skipActionErrorRevalidation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      deletedFetchers,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      [match.route.id, actionResult]\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter((rf) => rf.key !== key)\n      .forEach((rf) => {\n        let staleKey = rf.key;\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher = getLoadingFetcher(\n          undefined,\n          existingFetcher ? existingFetcher.data : undefined\n        );\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        if (fetchControllers.has(staleKey)) {\n          abortFetcher(staleKey);\n        }\n        if (rf.controller) {\n          fetchControllers.set(staleKey, rf.controller);\n        }\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((rf) => abortFetcher(rf.key));\n\n    abortController.signal.addEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    let { loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    abortController.signal.removeEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach((r) => fetchControllers.delete(r.key));\n\n    let redirect = findRedirect([...loaderResults, ...fetcherResults]);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey =\n          revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      return startRedirectNavigation(revalidationRequest, redirect.result);\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n\n    abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(\n          state.loaderData,\n          loaderData,\n          matches,\n          errors\n        ),\n        fetchers: new Map(state.fetchers),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[],\n    flushSync: boolean,\n    submission?: Submission\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(\n      key,\n      getLoadingFetcher(\n        submission,\n        existingFetcher ? existingFetcher.data : undefined\n      ),\n      { flushSync }\n    );\n\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal\n    );\n    fetchControllers.set(key, abortController);\n\n    let originatingLoadId = incrementingLoadId;\n    let results = await callDataStrategy(\n      \"loader\",\n      fetchRequest,\n      [match],\n      matches\n    );\n    let result = results[0];\n\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // We don't want errors bubbling up or redirects followed for unmounted\n    // fetchers, so short circuit here if it was removed from the UI\n    if (deletedFetchers.has(key)) {\n      updateFetcherState(key, getDoneFetcher(undefined));\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our loader started, so that\n        // should take precedence over this redirect navigation\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        await startRedirectNavigation(fetchRequest, result);\n        return;\n      }\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      setFetcherError(key, routeId, result.error);\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    updateFetcherState(key, getDoneFetcher(result.data));\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    request: Request,\n    redirect: RedirectResult,\n    {\n      submission,\n      fetcherSubmission,\n      replace,\n    }: {\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      replace?: boolean;\n    } = {}\n  ) {\n    if (redirect.response.headers.has(\"X-Remix-Revalidate\")) {\n      isRevalidationRequired = true;\n    }\n\n    let location = redirect.response.headers.get(\"Location\");\n    invariant(location, \"Expected a Location header on the redirect Response\");\n    location = normalizeRedirectLocation(\n      location,\n      new URL(request.url),\n      basename\n    );\n    let redirectLocation = createLocation(state.location, location, {\n      _isRedirect: true,\n    });\n\n    if (isBrowser) {\n      let isDocumentReload = false;\n\n      if (redirect.response.headers.has(\"X-Remix-Reload-Document\")) {\n        // Hard reload if the response contained X-Remix-Reload-Document\n        isDocumentReload = true;\n      } else if (ABSOLUTE_URL_REGEX.test(location)) {\n        const url = init.history.createURL(location);\n        isDocumentReload =\n          // Hard reload if it's an absolute URL to a new origin\n          url.origin !== routerWindow.location.origin ||\n          // Hard reload if it's an absolute URL that does not match our basename\n          stripBasename(url.pathname, basename) == null;\n      }\n\n      if (isDocumentReload) {\n        if (replace) {\n          routerWindow.location.replace(location);\n        } else {\n          routerWindow.location.assign(location);\n        }\n        return;\n      }\n    }\n\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true ? HistoryAction.Replace : HistoryAction.Push;\n\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let { formMethod, formAction, formEncType } = state.navigation;\n    if (\n      !submission &&\n      !fetcherSubmission &&\n      formMethod &&\n      formAction &&\n      formEncType\n    ) {\n      submission = getSubmissionFromNavigation(state.navigation);\n    }\n\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    let activeSubmission = submission || fetcherSubmission;\n    if (\n      redirectPreserveMethodStatusCodes.has(redirect.response.status) &&\n      activeSubmission &&\n      isMutationMethod(activeSubmission.formMethod)\n    ) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          ...activeSubmission,\n          formAction: location,\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    } else {\n      // If we have a navigation submission, we will preserve it through the\n      // redirect navigation\n      let overrideNavigation = getLoadingNavigation(\n        redirectLocation,\n        submission\n      );\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Send fetcher submissions through for shouldRevalidate\n        fetcherSubmission,\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    }\n  }\n\n  // Utility wrapper for calling dataStrategy client-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(\n    type: \"loader\" | \"action\",\n    request: Request,\n    matchesToLoad: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[]\n  ): Promise<DataResult[]> {\n    try {\n      let results = await callDataStrategyImpl(\n        dataStrategyImpl,\n        type,\n        request,\n        matchesToLoad,\n        matches,\n        manifest,\n        mapRouteProperties\n      );\n\n      return await Promise.all(\n        results.map((result, i) => {\n          if (isRedirectHandlerResult(result)) {\n            let response = result.result as Response;\n            return {\n              type: ResultType.redirect,\n              response: normalizeRelativeRoutingRedirectResponse(\n                response,\n                request,\n                matchesToLoad[i].route.id,\n                matches,\n                basename,\n                future.v7_relativeSplatPath\n              ),\n            };\n          }\n\n          return convertHandlerResultToDataResult(result);\n        })\n      );\n    } catch (e) {\n      // If the outer dataStrategy method throws, just return the error for all\n      // matches - and it'll naturally bubble to the root\n      return matchesToLoad.map(() => ({\n        type: ResultType.error,\n        error: e,\n      }));\n    }\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    currentMatches: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    let [loaderResults, ...fetcherResults] = await Promise.all([\n      matchesToLoad.length\n        ? callDataStrategy(\"loader\", request, matchesToLoad, matches)\n        : [],\n      ...fetchersToLoad.map((f) => {\n        if (f.matches && f.match && f.controller) {\n          let fetcherRequest = createClientSideRequest(\n            init.history,\n            f.path,\n            f.controller.signal\n          );\n          return callDataStrategy(\n            \"loader\",\n            fetcherRequest,\n            [f.match],\n            f.matches\n          ).then((r) => r[0]);\n        } else {\n          return Promise.resolve<DataResult>({\n            type: ResultType.error,\n            error: getInternalRouterError(404, {\n              pathname: f.path,\n            }),\n          });\n        }\n      }),\n    ]);\n\n    await Promise.all([\n      resolveDeferredResults(\n        currentMatches,\n        matchesToLoad,\n        loaderResults,\n        loaderResults.map(() => request.signal),\n        false,\n        state.loaderData\n      ),\n      resolveDeferredResults(\n        currentMatches,\n        fetchersToLoad.map((f) => f.match),\n        fetcherResults,\n        fetchersToLoad.map((f) => (f.controller ? f.controller.signal : null)),\n        true\n      ),\n    ]);\n\n    return {\n      loaderResults,\n      fetcherResults,\n    };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function updateFetcherState(\n    key: string,\n    fetcher: Fetcher,\n    opts: { flushSync?: boolean } = {}\n  ) {\n    state.fetchers.set(key, fetcher);\n    updateState(\n      { fetchers: new Map(state.fetchers) },\n      { flushSync: (opts && opts.flushSync) === true }\n    );\n  }\n\n  function setFetcherError(\n    key: string,\n    routeId: string,\n    error: any,\n    opts: { flushSync?: boolean } = {}\n  ) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState(\n      {\n        errors: {\n          [boundaryMatch.route.id]: error,\n        },\n        fetchers: new Map(state.fetchers),\n      },\n      { flushSync: (opts && opts.flushSync) === true }\n    );\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    if (future.v7_fetcherPersist) {\n      activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1);\n      // If this fetcher was previously marked for deletion, unmark it since we\n      // have a new instance\n      if (deletedFetchers.has(key)) {\n        deletedFetchers.delete(key);\n      }\n    }\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  function deleteFetcher(key: string): void {\n    let fetcher = state.fetchers.get(key);\n    // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (\n      fetchControllers.has(key) &&\n      !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))\n    ) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    deletedFetchers.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function deleteFetcherAndUpdateState(key: string): void {\n    if (future.v7_fetcherPersist) {\n      let count = (activeFetchers.get(key) || 0) - 1;\n      if (count <= 0) {\n        activeFetchers.delete(key);\n        deletedFetchers.add(key);\n      } else {\n        activeFetchers.set(key, count);\n      }\n    } else {\n      deleteFetcher(key);\n    }\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): boolean {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key: string, fn: BlockerFunction) {\n    let blocker: Blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key: string) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key: string, newBlocker: Blocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(\n      (blocker.state === \"unblocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"proceeding\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"unblocked\") ||\n        (blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\"),\n      `Invalid blocker state transition: ${blocker.state} -> ${newBlocker.state}`\n    );\n\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({ blockers });\n  }\n\n  function shouldBlockNavigation({\n    currentLocation,\n    nextLocation,\n    historyAction,\n  }: {\n    currentLocation: Location;\n    nextLocation: Location;\n    historyAction: HistoryAction;\n  }): string | undefined {\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({ currentLocation, nextLocation, historyAction })) {\n      return blockerKey;\n    }\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null;\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function getScrollKey(location: Location, matches: AgnosticDataRouteMatch[]) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(\n        location,\n        matches.map((m) => convertRouteMatchToUiMatch(m, state.loaderData))\n      );\n      return key || location.key;\n    }\n    return location.key;\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  function _internalSetRoutes(newRoutes: AgnosticDataRouteObject[]) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(\n      newRoutes,\n      mapRouteProperties,\n      undefined,\n      manifest\n    );\n  }\n\n  router = {\n    get basename() {\n      return basename;\n    },\n    get future() {\n      return future;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    get window() {\n      return routerWindow;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    encodeLocation: (to: To) => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher: deleteFetcherAndUpdateState,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport const UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface StaticHandlerFutureConfig {\n  v7_relativeSplatPath: boolean;\n  v7_throwAbortReason: boolean;\n}\n\nexport interface CreateStaticHandlerOptions {\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<StaticHandlerFutureConfig>;\n}\n\nexport function createStaticHandler(\n  routes: AgnosticRouteObject[],\n  opts?: CreateStaticHandlerOptions\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to createStaticHandler\"\n  );\n\n  let manifest: RouteManifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (opts?.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts?.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Config driven behavior flags\n  let future: StaticHandlerFutureConfig = {\n    v7_relativeSplatPath: false,\n    v7_throwAbortReason: false,\n    ...(opts ? opts.future : null),\n  };\n\n  let dataRoutes = convertRoutesToDataRoutes(\n    routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   *\n   * - `opts.requestContext` is an optional server context that will be passed\n   *   to actions/loaders in the `context` parameter\n   * - `opts.skipLoaderErrorBubbling` is an optional parameter that will prevent\n   *   the bubbling of errors which allows single-fetch-type implementations\n   *   where the client will handle the bubbling and we may need to return data\n   *   for the handling route\n   */\n  async function query(\n    request: Request,\n    {\n      requestContext,\n      skipLoaderErrorBubbling,\n      unstable_dataStrategy,\n    }: {\n      requestContext?: unknown;\n      skipLoaderErrorBubbling?: boolean;\n      unstable_dataStrategy?: DataStrategyFunction;\n    } = {}\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, { method });\n      let { matches: methodNotAllowedMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      unstable_dataStrategy || null,\n      skipLoaderErrorBubbling === true,\n      null\n    );\n    if (isResponse(result)) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, basename, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   *\n   * - `opts.routeId` allows you to specify the specific route handler to call.\n   *   If not provided the handler will determine the proper route by matching\n   *   against `request.url`\n   * - `opts.requestContext` is an optional server context that will be passed\n   *    to actions/loaders in the `context` parameter\n   */\n  async function queryRoute(\n    request: Request,\n    {\n      routeId,\n      requestContext,\n      unstable_dataStrategy,\n    }: {\n      requestContext?: unknown;\n      routeId?: string;\n      unstable_dataStrategy?: DataStrategyFunction;\n    } = {}\n  ): Promise<any> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, { method });\n    } else if (!matches) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId,\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      unstable_dataStrategy || null,\n      false,\n      match\n    );\n\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      let data = Object.values(result.loaderData)[0];\n      if (result.activeDeferreds?.[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null,\n    skipLoaderErrorBubbling: boolean,\n    routeMatch: AgnosticDataRouteMatch | null\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          requestContext,\n          unstable_dataStrategy,\n          skipLoaderErrorBubbling,\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        unstable_dataStrategy,\n        skipLoaderErrorBubbling,\n        routeMatch\n      );\n      return isResponse(result)\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction for a\n      // `queryRoute` call, we throw the `HandlerResult` to bail out early\n      // and then return or throw the raw Response here accordingly\n      if (isHandlerResult(e) && isResponse(e.result)) {\n        if (e.type === ResultType.error) {\n          throw e.result;\n        }\n        return e.result;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null,\n    skipLoaderErrorBubbling: boolean,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    let result: DataResult;\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id,\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    } else {\n      let results = await callDataStrategy(\n        \"action\",\n        request,\n        [actionMatch],\n        matches,\n        isRouteRequest,\n        requestContext,\n        unstable_dataStrategy\n      );\n      result = results[0];\n\n      if (request.signal.aborted) {\n        throwStaticHandlerAbortedError(request, isRouteRequest, future);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.response.status,\n        headers: {\n          Location: result.response.headers.get(\"Location\")!,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, { type: \"defer-action\" });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal,\n    });\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = skipLoaderErrorBubbling\n        ? actionMatch\n        : findNearestBoundary(matches, actionMatch.route.id);\n\n      let context = await loadRouteData(\n        loaderRequest,\n        matches,\n        requestContext,\n        unstable_dataStrategy,\n        skipLoaderErrorBubbling,\n        null,\n        [boundaryMatch.route.id, result]\n      );\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : result.statusCode != null\n          ? result.statusCode\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    let context = await loadRouteData(\n      loaderRequest,\n      matches,\n      requestContext,\n      unstable_dataStrategy,\n      skipLoaderErrorBubbling,\n      null\n    );\n\n    return {\n      ...context,\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionHeaders: result.headers\n        ? { [actionMatch.route.id]: result.headers }\n        : {},\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null,\n    skipLoaderErrorBubbling: boolean,\n    routeMatch: AgnosticDataRouteMatch | null,\n    pendingActionResult?: PendingActionResult\n  ): Promise<\n    | Omit<\n        StaticHandlerContext,\n        \"location\" | \"basename\" | \"actionData\" | \"actionHeaders\"\n      >\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (\n      isRouteRequest &&\n      !routeMatch?.route.loader &&\n      !routeMatch?.route.lazy\n    ) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch?.route.id,\n      });\n    }\n\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : pendingActionResult && isErrorResult(pendingActionResult[1])\n      ? getLoaderMatchesUntilBoundary(matches, pendingActionResult[0])\n      : matches;\n    let matchesToLoad = requestMatches.filter(\n      (m) => m.route.loader || m.route.lazy\n    );\n\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce(\n          (acc, m) => Object.assign(acc, { [m.route.id]: null }),\n          {}\n        ),\n        errors:\n          pendingActionResult && isErrorResult(pendingActionResult[1])\n            ? {\n                [pendingActionResult[0]]: pendingActionResult[1].error,\n              }\n            : null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let results = await callDataStrategy(\n      \"loader\",\n      request,\n      matchesToLoad,\n      matches,\n      isRouteRequest,\n      requestContext,\n      unstable_dataStrategy\n    );\n\n    if (request.signal.aborted) {\n      throwStaticHandlerAbortedError(request, isRouteRequest, future);\n    }\n\n    // Process and commit output from loaders\n    let activeDeferreds = new Map<string, DeferredData>();\n    let context = processRouteLoaderData(\n      matches,\n      matchesToLoad,\n      results,\n      pendingActionResult,\n      activeDeferreds,\n      skipLoaderErrorBubbling\n    );\n\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set<string>(\n      matchesToLoad.map((match) => match.route.id)\n    );\n    matches.forEach((match) => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n\n    return {\n      ...context,\n      matches,\n      activeDeferreds:\n        activeDeferreds.size > 0\n          ? Object.fromEntries(activeDeferreds.entries())\n          : null,\n    };\n  }\n\n  // Utility wrapper for calling dataStrategy server-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(\n    type: \"loader\" | \"action\",\n    request: Request,\n    matchesToLoad: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    isRouteRequest: boolean,\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null\n  ): Promise<DataResult[]> {\n    let results = await callDataStrategyImpl(\n      unstable_dataStrategy || defaultDataStrategy,\n      type,\n      request,\n      matchesToLoad,\n      matches,\n      manifest,\n      mapRouteProperties,\n      requestContext\n    );\n\n    return await Promise.all(\n      results.map((result, i) => {\n        if (isRedirectHandlerResult(result)) {\n          let response = result.result as Response;\n          // Throw redirects and let the server handle them with an HTTP redirect\n          throw normalizeRelativeRoutingRedirectResponse(\n            response,\n            request,\n            matchesToLoad[i].route.id,\n            matches,\n            basename,\n            future.v7_relativeSplatPath\n          );\n        }\n        if (isResponse(result.result) && isRouteRequest) {\n          // For SSR single-route requests, we want to hand Responses back\n          // directly without unwrapping\n          throw result;\n        }\n\n        return convertHandlerResultToDataResult(result);\n      })\n    );\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: isRouteErrorResponse(error) ? error.status : 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\nfunction throwStaticHandlerAbortedError(\n  request: Request,\n  isRouteRequest: boolean,\n  future: StaticHandlerFutureConfig\n) {\n  if (future.v7_throwAbortReason && request.signal.reason !== undefined) {\n    throw request.signal.reason;\n  }\n\n  let method = isRouteRequest ? \"queryRoute\" : \"query\";\n  throw new Error(`${method}() call aborted: ${request.method} ${request.url}`);\n}\n\nfunction isSubmissionNavigation(\n  opts: BaseNavigateOrFetchOptions\n): opts is SubmissionNavigateOptions {\n  return (\n    opts != null &&\n    ((\"formData\" in opts && opts.formData != null) ||\n      (\"body\" in opts && opts.body !== undefined))\n  );\n}\n\nfunction normalizeTo(\n  location: Path,\n  matches: AgnosticDataRouteMatch[],\n  basename: string,\n  prependBasename: boolean,\n  to: To | null,\n  v7_relativeSplatPath: boolean,\n  fromRouteId?: string,\n  relative?: RelativeRoutingType\n) {\n  let contextualMatches: AgnosticDataRouteMatch[];\n  let activeRouteMatch: AgnosticDataRouteMatch | undefined;\n  if (fromRouteId) {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n\n  // Resolve the relative path\n  let path = resolveTo(\n    to ? to : \".\",\n    getResolveToMatches(contextualMatches, v7_relativeSplatPath),\n    stripBasename(location.pathname, basename) || location.pathname,\n    relative === \"path\"\n  );\n\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n\n  // Add an ?index param for matched index routes if we don't already have one\n  if (\n    (to == null || to === \"\" || to === \".\") &&\n    activeRouteMatch &&\n    activeRouteMatch.route.index &&\n    !hasNakedIndexQuery(path.search)\n  ) {\n    path.search = path.search\n      ? path.search.replace(/^\\?/, \"?index&\")\n      : \"?index\";\n  }\n\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname =\n      path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  normalizeFormMethod: boolean,\n  isFetcher: boolean,\n  path: string,\n  opts?: BaseNavigateOrFetchOptions\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponseImpl;\n} {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return { path };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, { method: opts.formMethod }),\n    };\n  }\n\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, { type: \"invalid-body\" }),\n  });\n\n  // Create a Submission on non-GET navigations\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = normalizeFormMethod\n    ? (rawFormMethod.toUpperCase() as V7_FormMethod)\n    : (rawFormMethod.toLowerCase() as FormMethod);\n  let formAction = stripHashFromPath(path);\n\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      let text =\n        typeof opts.body === \"string\"\n          ? opts.body\n          : opts.body instanceof FormData ||\n            opts.body instanceof URLSearchParams\n          ? // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n            Array.from(opts.body.entries()).reduce(\n              (acc, [name, value]) => `${acc}${name}=${value}\\n`,\n              \"\"\n            )\n          : String(opts.body);\n\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text,\n        },\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      try {\n        let json =\n          typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined,\n          },\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n\n  invariant(\n    typeof FormData === \"function\",\n    \"FormData is not available in this environment\"\n  );\n\n  let searchParams: URLSearchParams;\n  let formData: FormData;\n\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n\n  let submission: Submission = {\n    formMethod,\n    formAction,\n    formEncType:\n      (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n    formData,\n    json: undefined,\n    text: undefined,\n  };\n\n  if (isMutationMethod(submission.formMethod)) {\n    return { path, submission };\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = `?${searchParams}`;\n\n  return { path: createPath(parsedPath), submission };\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  history: History,\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isInitialLoad: boolean,\n  skipActionErrorRevalidation: boolean,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: string[],\n  deletedFetchers: Set<string>,\n  fetchLoadMatches: Map<string, FetchLoadMatch>,\n  fetchRedirectIds: Set<string>,\n  routesToUse: AgnosticDataRouteObject[],\n  basename: string | undefined,\n  pendingActionResult?: PendingActionResult\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingActionResult\n    ? isErrorResult(pendingActionResult[1])\n      ? pendingActionResult[1].error\n      : pendingActionResult[1].data\n    : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId =\n    pendingActionResult && isErrorResult(pendingActionResult[1])\n      ? pendingActionResult[0]\n      : undefined;\n  let boundaryMatches = boundaryId\n    ? getLoaderMatchesUntilBoundary(matches, boundaryId)\n    : matches;\n\n  // Don't revalidate loaders by default after action 4xx/5xx responses\n  // when the flag is enabled.  They can still opt-into revalidation via\n  // `shouldRevalidate` via `actionResult`\n  let actionStatus = pendingActionResult\n    ? pendingActionResult[1].statusCode\n    : undefined;\n  let shouldSkipRevalidation =\n    skipActionErrorRevalidation && actionStatus && actionStatus >= 400;\n\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    let { route } = match;\n    if (route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n\n    if (route.loader == null) {\n      return false;\n    }\n\n    if (isInitialLoad) {\n      if (typeof route.loader !== \"function\" || route.loader.hydrate) {\n        return true;\n      }\n      return (\n        state.loaderData[route.id] === undefined &&\n        // Don't re-run if the loader ran and threw an error\n        (!state.errors || state.errors[route.id] === undefined)\n      );\n    }\n\n    // Always call the loader on new route instances and pending defer cancellations\n    if (\n      isNewLoader(state.loaderData, state.matches[index], match) ||\n      cancelledDeferredRoutes.some((id) => id === match.route.id)\n    ) {\n      return true;\n    }\n\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n\n    return shouldRevalidateLoader(match, {\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params,\n      ...submission,\n      actionResult,\n      unstable_actionStatus: actionStatus,\n      defaultShouldRevalidate: shouldSkipRevalidation\n        ? false\n        : // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n          isRevalidationRequired ||\n          currentUrl.pathname + currentUrl.search ===\n            nextUrl.pathname + nextUrl.search ||\n          // Search params affect all loaders\n          currentUrl.search !== nextUrl.search ||\n          isNewRouteInstance(currentRouteMatch, nextRouteMatch),\n    });\n  });\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate:\n    //  - on initial load (shouldn't be any fetchers then anyway)\n    //  - if fetcher won't be present in the subsequent render\n    //    - no longer matches the URL (v7_fetcherPersist=false)\n    //    - was unmounted but persisted due to v7_fetcherPersist=true\n    if (\n      isInitialLoad ||\n      !matches.some((m) => m.route.id === f.routeId) ||\n      deletedFetchers.has(key)\n    ) {\n      return;\n    }\n\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null,\n      });\n      return;\n    }\n\n    // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n    let fetcher = state.fetchers.get(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n\n    let shouldRevalidate = false;\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.includes(key)) {\n      // Always revalidate if the fetcher was cancelled\n      shouldRevalidate = true;\n    } else if (\n      fetcher &&\n      fetcher.state !== \"idle\" &&\n      fetcher.data === undefined\n    ) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, {\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params,\n        ...submission,\n        actionResult,\n        unstable_actionStatus: actionStatus,\n        defaultShouldRevalidate: shouldSkipRevalidation\n          ? false\n          : isRevalidationRequired,\n      });\n    }\n\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController(),\n      });\n    }\n  });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath != null &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  loaderMatch: AgnosticDataRouteMatch,\n  arg: ShouldRevalidateFunctionArgs\n) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(\n  route: AgnosticDataRouteObject,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  manifest: RouteManifest\n) {\n  if (!route.lazy) {\n    return;\n  }\n\n  let lazyRoute = await route.lazy();\n\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates: Record<string, any> = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue =\n      routeToUpdate[lazyRouteProperty as keyof typeof routeToUpdate];\n\n    let isPropertyStaticallyDefined =\n      staticRouteValue !== undefined &&\n      // This property isn't static since it should always be updated based\n      // on the route updates\n      lazyRouteProperty !== \"hasErrorBoundary\";\n\n    warning(\n      !isPropertyStaticallyDefined,\n      `Route \"${routeToUpdate.id}\" has a static property \"${lazyRouteProperty}\" ` +\n        `defined but its lazy function is also returning a value for this property. ` +\n        `The lazy route property \"${lazyRouteProperty}\" will be ignored.`\n    );\n\n    if (\n      !isPropertyStaticallyDefined &&\n      !immutableRouteKeys.has(lazyRouteProperty as ImmutableRouteKey)\n    ) {\n      routeUpdates[lazyRouteProperty] =\n        lazyRoute[lazyRouteProperty as keyof typeof lazyRoute];\n    }\n  }\n\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, {\n    // To keep things framework agnostic, we use the provided\n    // `mapRouteProperties` (or wrapped `detectErrorBoundary`) function to\n    // set the framework-aware properties (`element`/`hasErrorBoundary`) since\n    // the logic will differ between frameworks.\n    ...mapRouteProperties(routeToUpdate),\n    lazy: undefined,\n  });\n}\n\n// Default implementation of `dataStrategy` which fetches all loaders in parallel\nfunction defaultDataStrategy(\n  opts: DataStrategyFunctionArgs\n): ReturnType<DataStrategyFunction> {\n  return Promise.all(opts.matches.map((m) => m.resolve()));\n}\n\nasync function callDataStrategyImpl(\n  dataStrategyImpl: DataStrategyFunction,\n  type: \"loader\" | \"action\",\n  request: Request,\n  matchesToLoad: AgnosticDataRouteMatch[],\n  matches: AgnosticDataRouteMatch[],\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  requestContext?: unknown\n): Promise<HandlerResult[]> {\n  let routeIdsToLoad = matchesToLoad.reduce(\n    (acc, m) => acc.add(m.route.id),\n    new Set<string>()\n  );\n  let loadedMatches = new Set<string>();\n\n  // Send all matches here to allow for a middleware-type implementation.\n  // handler will be a no-op for unneeded routes and we filter those results\n  // back out below.\n  let results = await dataStrategyImpl({\n    matches: matches.map((match) => {\n      let shouldLoad = routeIdsToLoad.has(match.route.id);\n      // `resolve` encapsulates the route.lazy, executing the\n      // loader/action, and mapping return values/thrown errors to a\n      // HandlerResult.  Users can pass a callback to take fine-grained control\n      // over the execution of the loader/action\n      let resolve: DataStrategyMatch[\"resolve\"] = (handlerOverride) => {\n        loadedMatches.add(match.route.id);\n        return shouldLoad\n          ? callLoaderOrAction(\n              type,\n              request,\n              match,\n              manifest,\n              mapRouteProperties,\n              handlerOverride,\n              requestContext\n            )\n          : Promise.resolve({ type: ResultType.data, result: undefined });\n      };\n\n      return {\n        ...match,\n        shouldLoad,\n        resolve,\n      };\n    }),\n    request,\n    params: matches[0].params,\n    context: requestContext,\n  });\n\n  // Throw if any loadRoute implementations not called since they are what\n  // ensures a route is fully loaded\n  matches.forEach((m) =>\n    invariant(\n      loadedMatches.has(m.route.id),\n      `\\`match.resolve()\\` was not called for route id \"${m.route.id}\". ` +\n        \"You must call `match.resolve()` on every match passed to \" +\n        \"`dataStrategy` to ensure all routes are properly loaded.\"\n    )\n  );\n\n  // Filter out any middleware-only matches for which we didn't need to run handlers\n  return results.filter((_, i) => routeIdsToLoad.has(matches[i].route.id));\n}\n\n// Default logic for calling a loader/action is the user has no specified a dataStrategy\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  handlerOverride: Parameters<DataStrategyMatch[\"resolve\"]>[0],\n  staticContext?: unknown\n): Promise<HandlerResult> {\n  let result: HandlerResult;\n  let onReject: (() => void) | undefined;\n\n  let runHandler = (\n    handler: AgnosticRouteObject[\"loader\"] | AgnosticRouteObject[\"action\"]\n  ): Promise<HandlerResult> => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject: () => void;\n    // This will never resolve so safe to type it as Promise<HandlerResult> to\n    // satisfy the function return value\n    let abortPromise = new Promise<HandlerResult>((_, r) => (reject = r));\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n\n    let actualHandler = (ctx?: unknown) => {\n      if (typeof handler !== \"function\") {\n        return Promise.reject(\n          new Error(\n            `You cannot call the handler for a route which defines a boolean ` +\n              `\"${type}\" [routeId: ${match.route.id}]`\n          )\n        );\n      }\n      return handler(\n        {\n          request,\n          params: match.params,\n          context: staticContext,\n        },\n        ...(ctx !== undefined ? [ctx] : [])\n      );\n    };\n\n    let handlerPromise: Promise<HandlerResult>;\n    if (handlerOverride) {\n      handlerPromise = handlerOverride((ctx: unknown) => actualHandler(ctx));\n    } else {\n      handlerPromise = (async () => {\n        try {\n          let val = await actualHandler();\n          return { type: \"data\", result: val };\n        } catch (e) {\n          return { type: \"error\", result: e };\n        }\n      })();\n    }\n\n    return Promise.race([handlerPromise, abortPromise]);\n  };\n\n  try {\n    let handler = match.route[type];\n\n    if (match.route.lazy) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let handlerError;\n        let [value] = await Promise.all([\n          // If the handler throws, don't let it immediately bubble out,\n          // since we need to let the lazy() execution finish so we know if this\n          // route has a boundary that can handle the error\n          runHandler(handler).catch((e) => {\n            handlerError = e;\n          }),\n          loadLazyRouteModule(match.route, mapRouteProperties, manifest),\n        ]);\n        if (handlerError !== undefined) {\n          throw handlerError;\n        }\n        result = value!;\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadLazyRouteModule(match.route, mapRouteProperties, manifest);\n\n        handler = match.route[type];\n        if (handler) {\n          // Handler still runs even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id,\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return { type: ResultType.data, result: undefined };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname,\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n\n    invariant(\n      result.result !== undefined,\n      `You defined ${type === \"action\" ? \"an action\" : \"a loader\"} for route ` +\n        `\"${match.route.id}\" but didn't return anything from your \\`${type}\\` ` +\n        `function. Please return a value or \\`null\\`.`\n    );\n  } catch (e) {\n    // We should already be catching and converting normal handler executions to\n    // HandlerResults and returning them, so anything that throws here is an\n    // unexpected error we still need to wrap\n    return { type: ResultType.error, result: e };\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n\n  return result;\n}\n\nasync function convertHandlerResultToDataResult(\n  handlerResult: HandlerResult\n): Promise<DataResult> {\n  let { result, type, status } = handlerResult;\n\n  if (isResponse(result)) {\n    let data: any;\n\n    try {\n      let contentType = result.headers.get(\"Content-Type\");\n      // Check between word boundaries instead of startsWith() due to the last\n      // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n      if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n        if (result.body == null) {\n          data = null;\n        } else {\n          data = await result.json();\n        }\n      } else {\n        data = await result.text();\n      }\n    } catch (e) {\n      return { type: ResultType.error, error: e };\n    }\n\n    if (type === ResultType.error) {\n      return {\n        type: ResultType.error,\n        error: new ErrorResponseImpl(result.status, result.statusText, data),\n        statusCode: result.status,\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (type === ResultType.error) {\n    return {\n      type: ResultType.error,\n      error: result,\n      statusCode: isRouteErrorResponse(result) ? result.status : status,\n    };\n  }\n\n  if (isDeferredData(result)) {\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: result.init?.status,\n      headers: result.init?.headers && new Headers(result.init.headers),\n    };\n  }\n\n  return { type: ResultType.data, data: result, statusCode: status };\n}\n\n// Support relative routing in internal redirects\nfunction normalizeRelativeRoutingRedirectResponse(\n  response: Response,\n  request: Request,\n  routeId: string,\n  matches: AgnosticDataRouteMatch[],\n  basename: string,\n  v7_relativeSplatPath: boolean\n) {\n  let location = response.headers.get(\"Location\");\n  invariant(\n    location,\n    \"Redirects returned/thrown from loaders/actions must have a Location header\"\n  );\n\n  if (!ABSOLUTE_URL_REGEX.test(location)) {\n    let trimmedMatches = matches.slice(\n      0,\n      matches.findIndex((m) => m.route.id === routeId) + 1\n    );\n    location = normalizeTo(\n      new URL(request.url),\n      trimmedMatches,\n      basename,\n      true,\n      location,\n      v7_relativeSplatPath\n    );\n    response.headers.set(\"Location\", location);\n  }\n\n  return response;\n}\n\nfunction normalizeRedirectLocation(\n  location: string,\n  currentUrl: URL,\n  basename: string\n): string {\n  if (ABSOLUTE_URL_REGEX.test(location)) {\n    // Strip off the protocol+origin for same-origin + same-basename absolute redirects\n    let normalizedLocation = location;\n    let url = normalizedLocation.startsWith(\"//\")\n      ? new URL(currentUrl.protocol + normalizedLocation)\n      : new URL(normalizedLocation);\n    let isSameBasename = stripBasename(url.pathname, basename) != null;\n    if (url.origin === currentUrl.origin && isSameBasename) {\n      return url.pathname + url.search + url.hash;\n    }\n  }\n  return location;\n}\n\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(\n  history: History,\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let { formMethod, formEncType } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({ \"Content-Type\": formEncType });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (\n      formEncType === \"application/x-www-form-urlencoded\" &&\n      submission.formData\n    ) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n\n  return searchParams;\n}\n\nfunction convertSearchParamsToFormData(\n  searchParams: URLSearchParams\n): FormData {\n  let formData = new FormData();\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n  return formData;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingActionResult: PendingActionResult | undefined,\n  activeDeferreds: Map<string, DeferredData>,\n  skipLoaderErrorBubbling: boolean\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n  let pendingError =\n    pendingActionResult && isErrorResult(pendingActionResult[1])\n      ? pendingActionResult[1].error\n      : undefined;\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError !== undefined) {\n        error = pendingError;\n        pendingError = undefined;\n      }\n\n      errors = errors || {};\n\n      if (skipLoaderErrorBubbling) {\n        errors[id] = error;\n      } else {\n        // Look upwards from the matched route for the closest ancestor error\n        // boundary, defaulting to the root match.  Prefer higher error values\n        // if lower errors bubble to the same boundary\n        let boundaryMatch = findNearestBoundary(matches, id);\n        if (errors[boundaryMatch.route.id] == null) {\n          errors[boundaryMatch.route.id] = error;\n        }\n      }\n\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (\n          result.statusCode != null &&\n          result.statusCode !== 200 &&\n          !foundError\n        ) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      } else {\n        loaderData[id] = result.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (result.statusCode && result.statusCode !== 200 && !foundError) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError !== undefined && pendingActionResult) {\n    errors = { [pendingActionResult[0]]: pendingError };\n    loaderData[pendingActionResult[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingActionResult: PendingActionResult | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: DataResult[],\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    matchesToLoad,\n    results,\n    pendingActionResult,\n    activeDeferreds,\n    false // This method is only called client side so we always want to bubble\n  );\n\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let { key, match, controller } = revalidatingFetchers[index];\n    invariant(\n      fetcherResults !== undefined && fetcherResults[index] !== undefined,\n      \"Did not find corresponding fetcher result\"\n    );\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      continue;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match?.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[],\n  errors: RouteData | null | undefined\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      } else {\n        // No-op - this is so we ignore existing data if we have a key in the\n        // incoming object with an undefined value, which is how we unset a prior\n        // loaderData if we encounter a loader error\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n\nfunction getActionDataForCommit(\n  pendingActionResult: PendingActionResult | undefined\n) {\n  if (!pendingActionResult) {\n    return {};\n  }\n  return isErrorResult(pendingActionResult[1])\n    ? {\n        // Clear out prior actionData on errors\n        actionData: {},\n      }\n    : {\n        actionData: {\n          [pendingActionResult[0]]: pendingActionResult[1].data,\n        },\n      };\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route =\n    routes.length === 1\n      ? routes[0]\n      : routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n          id: `__shim-error-route__`,\n        };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n  };\n}\n\nfunction getInternalRouterError(\n  status: number,\n  {\n    pathname,\n    routeId,\n    method,\n    type,\n  }: {\n    pathname?: string;\n    routeId?: string;\n    method?: string;\n    type?: \"defer-action\" | \"invalid-body\";\n  } = {}\n) {\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method} request to \"${pathname}\" but ` +\n        `did not provide a \\`loader\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = `Route \"${routeId}\" does not match URL \"${pathname}\"`;\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = `No route matches URL \"${pathname}\"`;\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method.toUpperCase()} request to \"${pathname}\" but ` +\n        `did not provide an \\`action\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (method) {\n      errorMessage = `Invalid request method \"${method.toUpperCase()}\"`;\n    }\n  }\n\n  return new ErrorResponseImpl(\n    status || 500,\n    statusText,\n    new Error(errorMessage),\n    true\n  );\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(\n  results: DataResult[]\n): { result: RedirectResult; idx: number } | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return { result, idx: i };\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\n\nfunction isHandlerResult(result: unknown): result is HandlerResult {\n  return (\n    result != null &&\n    typeof result === \"object\" &&\n    \"type\" in result &&\n    \"result\" in result &&\n    (result.type === ResultType.data || result.type === ResultType.error)\n  );\n}\n\nfunction isRedirectHandlerResult(result: HandlerResult) {\n  return (\n    isResponse(result.result) && redirectStatusCodes.has(result.result.status)\n  );\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nexport function isDeferredData(value: any): value is DeferredData {\n  let deferred: DeferredData = value;\n  return (\n    deferred &&\n    typeof deferred === \"object\" &&\n    typeof deferred.data === \"object\" &&\n    typeof deferred.subscribe === \"function\" &&\n    typeof deferred.cancel === \"function\" &&\n    typeof deferred.resolveData === \"function\"\n  );\n}\n\nfunction isResponse(value: any): value is Response {\n  return (\n    value != null &&\n    typeof value.status === \"number\" &&\n    typeof value.statusText === \"string\" &&\n    typeof value.headers === \"object\" &&\n    typeof value.body !== \"undefined\"\n  );\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isValidMethod(method: string): method is FormMethod | V7_FormMethod {\n  return validRequestMethods.has(method.toLowerCase() as FormMethod);\n}\n\nfunction isMutationMethod(\n  method: string\n): method is MutationFormMethod | V7_MutationFormMethod {\n  return validMutationMethods.has(method.toLowerCase() as MutationFormMethod);\n}\n\nasync function resolveDeferredResults(\n  currentMatches: AgnosticDataRouteMatch[],\n  matchesToLoad: (AgnosticDataRouteMatch | null)[],\n  results: DataResult[],\n  signals: (AbortSignal | null)[],\n  isFetcher: boolean,\n  currentLoaderData?: RouteData\n) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match!.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      let signal = signals[index];\n      invariant(\n        signal,\n        \"Expected an AbortSignal for revalidating fetcher deferred result\"\n      );\n      await resolveDeferredData(result, signal, isFetcher).then((result) => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n\nfunction getSubmissionFromNavigation(\n  navigation: Navigation\n): Submission | undefined {\n  let { formMethod, formAction, formEncType, text, formData, json } =\n    navigation;\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text,\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined,\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined,\n    };\n  }\n}\n\nfunction getLoadingNavigation(\n  location: Location,\n  submission?: Submission\n): NavigationStates[\"Loading\"] {\n  if (submission) {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n    };\n    return navigation;\n  } else {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n    };\n    return navigation;\n  }\n}\n\nfunction getSubmittingNavigation(\n  location: Location,\n  submission: Submission\n): NavigationStates[\"Submitting\"] {\n  let navigation: NavigationStates[\"Submitting\"] = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n  };\n  return navigation;\n}\n\nfunction getLoadingFetcher(\n  submission?: Submission,\n  data?: Fetcher[\"data\"]\n): FetcherStates[\"Loading\"] {\n  if (submission) {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data,\n    };\n    return fetcher;\n  } else {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data,\n    };\n    return fetcher;\n  }\n}\n\nfunction getSubmittingFetcher(\n  submission: Submission,\n  existingFetcher?: Fetcher\n): FetcherStates[\"Submitting\"] {\n  let fetcher: FetcherStates[\"Submitting\"] = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined,\n  };\n  return fetcher;\n}\n\nfunction getDoneFetcher(data: Fetcher[\"data\"]): FetcherStates[\"Idle\"] {\n  let fetcher: FetcherStates[\"Idle\"] = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data,\n  };\n  return fetcher;\n}\n\nfunction restoreAppliedTransitions(\n  _window: Window,\n  transitions: Map<string, Set<string>>\n) {\n  try {\n    let sessionPositions = _window.sessionStorage.getItem(\n      TRANSITIONS_STORAGE_KEY\n    );\n    if (sessionPositions) {\n      let json = JSON.parse(sessionPositions);\n      for (let [k, v] of Object.entries(json || {})) {\n        if (v && Array.isArray(v)) {\n          transitions.set(k, new Set(v || []));\n        }\n      }\n    }\n  } catch (e) {\n    // no-op, use default empty object\n  }\n}\n\nfunction persistAppliedTransitions(\n  _window: Window,\n  transitions: Map<string, Set<string>>\n) {\n  if (transitions.size > 0) {\n    let json: Record<string, string[]> = {};\n    for (let [k, v] of transitions) {\n      json[k] = [...v];\n    }\n    try {\n      _window.sessionStorage.setItem(\n        TRANSITIONS_STORAGE_KEY,\n        JSON.stringify(json)\n      );\n    } catch (error) {\n      warning(\n        false,\n        `Failed to save applied view transitions in sessionStorage (${error}).`\n      );\n    }\n  }\n}\n\n//#endregion\n"]},"metadata":{},"sourceType":"module"}